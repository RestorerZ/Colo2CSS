<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>ColorScheme2CSS</title>
<meta name="Generator" content="Vim/8.2" />
<meta name="plugin-version" content="vim8.1_v2" />
<meta name="syntax" content="vim" />
<meta name="settings" content="ignore_folding,use_xhtml,use_css,pre_wrap,no_foldcolumn,prevent_copy=,use_input_for_pc=fallback" />
<meta name="colorscheme" content="PaperColor" />
<link rel="stylesheet" type="text/css" href="PaperColor_dark.css" />
<style type="text/css">
pre { white-space: pre-wrap;}
</style>
</head>

<body>
<pre id='vimCodeElement0'>
<span class="Comment">&quot; colo2css.vim	vim&#0058;ts=8:sts=2:sw=2:noet:sta</span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">Maintainer:</span><span class="Comment">	Restorer, &lt;restorers@users.sf.net&gt;</span>
<span class="Comment">&quot; Last change:	05 Jan 2022</span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">Version:</span><span class="Comment">	1.8.12</span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">Description:</span><span class="Comment">	преобразование цветовой схемы Vim в файл CSS</span>
<span class="Comment">&quot;		converting a Vim color scheme to a CSS file</span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">URL:</span><span class="Comment">		<a href="https://github.com/RestorerZ/Colo2CSS">https://github.com/RestorerZ/Colo2CSS</a></span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">Copyright:</span><span class="Comment">	© Restorer, 2022</span>
<span class="Comment">&quot;</span> <span class="vimCommentTitle">License:</span><span class="Comment">	MPL 2.0, <a href="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</a></span>





<span class="vimLet">let</span> <span class="vimVar">s:old_set</span> <span class="vimOper">=</span> &amp;<span class="vimIsCommand">cpoptions</span>
<span class="vimCommand">set</span> <span class="PreProc">cpo</span><span class="PreProc">&amp;vim</span>

<span class="vimCommand">const</span> <span class="vimVar">s:NOT_RGB</span> <span class="vimOper">=</span>
<span class="vimContinue">  \</span> [[<span class="String">'darkyellow'</span>,<span class="Number">'8</span>B8B<span class="Number">00</span><span class="String">'],['</span><span class="vimIsCommand">lightmagenta</span>',<span class="Number">'F</span>F8BFF'],[<span class="String">'</span><span class="vimIsCommand">lightred</span>',<span class="Number">'F</span>F8B8B']]

<span class="vimCommand">const</span> <span class="vimVar">s:WINSYS_COLO</span> <span class="vimOper">=</span> <span class="Delimiter">{</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_SCROLLBAR'</span><span class="vimOperParen">:[</span><span class="String">'Scrollbar'</span><span class="vimOperParen">, </span><span class="String">'COLOR_SCROLLBAR'</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BACKGROUND'</span><span class="vimOperParen">:[</span><span class="String">'Background'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BACKGROUND'</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_DESKTOP'</span><span class="vimOperParen">:[</span><span class="String">'Background'</span><span class="vimOperParen">, </span><span class="String">'COLOR_DESKTOP'</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_ACTIVECAPTION'</span><span class="vimOperParen">:[</span><span class="String">'ActiveTitle'</span><span class="vimOperParen">, </span><span class="String">'COLOR_ACTIVECAPTION'</span><span class="vimOperParen">, </span><span class="Number">2</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_INACTIVECAPTION'</span><span class="vimOperParen">:[</span><span class="String">'InactiveTitle'</span><span class="vimOperParen">, </span><span class="String">'COLOR_INACTIVECAPTION'</span><span class="vimOperParen">, </span><span class="Number">3</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_MENU'</span><span class="vimOperParen">:[</span><span class="String">'Menu'</span><span class="vimOperParen">, </span><span class="String">'COLOR_MENU'</span><span class="vimOperParen">, </span><span class="Number">4</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_WINDOW'</span><span class="vimOperParen">:[</span><span class="String">'Window'</span><span class="vimOperParen">, </span><span class="String">'COLOR_WINDOW'</span><span class="vimOperParen">, </span><span class="Number">5</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_WINDOWFRAME'</span><span class="vimOperParen">:[</span><span class="String">'WindowFrame'</span><span class="vimOperParen">, </span><span class="String">'COLOR_WINDOWFRAME'</span><span class="vimOperParen">, </span><span class="Number">6</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_MENUTEXT'</span><span class="vimOperParen">:[</span><span class="String">'MenuText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_MENUTEXT'</span><span class="vimOperParen">, </span><span class="Number">7</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_WINDOWTEXT'</span><span class="vimOperParen">:[</span><span class="String">'WindowText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_WINDOWTEXT'</span><span class="vimOperParen">, </span><span class="Number">8</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_CAPTIONTEXT'</span><span class="vimOperParen">:[</span><span class="String">'TitleText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_CAPTIONTEXT'</span><span class="vimOperParen">, </span><span class="Number">9</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_ACTIVEBORDER'</span><span class="vimOperParen">:[</span><span class="String">'ActiveBorder'</span><span class="vimOperParen">, </span><span class="String">'COLOR_ACTIVEBORDER'</span><span class="vimOperParen">, </span><span class="Number">10</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_INACTIVEBORDER'</span><span class="vimOperParen">:[</span><span class="String">'InactiveBorder'</span><span class="vimOperParen">, </span><span class="String">'COLOR_INACTIVEBORDER'</span><span class="vimOperParen">, </span><span class="Number">11</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_APPWORKSPACE'</span><span class="vimOperParen">:[</span><span class="String">'AppWorkspace'</span><span class="vimOperParen">, </span><span class="String">'COLOR_APPWORKSPACE'</span><span class="vimOperParen">, </span><span class="Number">12</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_HIGHLIGHT'</span><span class="vimOperParen">:[</span><span class="String">'Hilight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_HIGHLIGHT'</span><span class="vimOperParen">, </span><span class="Number">13</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_HIGHLIGHTTEXT'</span><span class="vimOperParen">:[</span><span class="String">'HilightText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_HIGHLIGHTTEXT'</span><span class="vimOperParen">, </span><span class="Number">14</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DFACE'</span><span class="vimOperParen">:[</span><span class="String">'ButtonFace'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DFACE'</span><span class="vimOperParen">, </span><span class="Number">15</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BTNFACE'</span><span class="vimOperParen">:[</span><span class="String">'ButtonFace'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BTNFACE'</span><span class="vimOperParen">, </span><span class="Number">15</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DSHADOW'</span><span class="vimOperParen">:[</span><span class="String">'ButtonShadow'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DSHADOW'</span><span class="vimOperParen">, </span><span class="Number">16</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BTNSHADOW'</span><span class="vimOperParen">:[</span><span class="String">'ButtonShadow'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BTNSHADOW'</span><span class="vimOperParen">, </span><span class="Number">16</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_GRAYTEXT'</span><span class="vimOperParen">:[</span><span class="String">'GrayText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_GRAYTEXT'</span><span class="vimOperParen">, </span><span class="Number">17</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BTNTEXT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BTNTEXT'</span><span class="vimOperParen">, </span><span class="Number">18</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_INACTIVECAPTIONTEXT'</span><span class="vimOperParen">:[</span><span class="String">'InactiveTitleText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_INACTIVECAPTIONTEXT'</span><span class="vimOperParen">, </span><span class="Number">19</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DHILIGHT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonHighlight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DHILIGHT'</span><span class="vimOperParen">, </span><span class="Number">20</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DHIGHLIGHT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonHighlight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DHIGHLIGHT'</span><span class="vimOperParen">, </span><span class="Number">20</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BTNHILIGHT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonHighlight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BTNHILIGHT'</span><span class="vimOperParen">, </span><span class="Number">20</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_BTNHIGHLIGHT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonHighlight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_BTNHIGHLIGHT'</span><span class="vimOperParen">, </span><span class="Number">20</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DDKSHADOW'</span><span class="vimOperParen">:[</span><span class="String">'ButtonDkShadow'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DDKSHADOW'</span><span class="vimOperParen">, </span><span class="Number">21</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_3DLIGHT'</span><span class="vimOperParen">:[</span><span class="String">'ButtonLight'</span><span class="vimOperParen">, </span><span class="String">'COLOR_3DLIGHT'</span><span class="vimOperParen">, </span><span class="Number">22</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_INFOTEXT'</span><span class="vimOperParen">:[</span><span class="String">'InfoText'</span><span class="vimOperParen">, </span><span class="String">'COLOR_INFOTEXT'</span><span class="vimOperParen">, </span><span class="Number">23</span><span class="vimOperParen">],</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="String">'SYS_INFOBK'</span><span class="vimOperParen">:[</span><span class="String">'InfoWindow'</span><span class="vimOperParen">, </span><span class="String">'COLOR_INFOBK'</span><span class="vimOperParen">, </span><span class="Number">24</span><span class="vimOperParen">]</span>
<span class="vimContinue">  \</span><span class="vimOperParen"> </span><span class="Delimiter">}</span>

<span class="vimCommand">const</span> <span class="vimVar">s:FNT_SIZE</span> <span class="vimOper">=</span> [<span class="String">'h'</span>, <span class="String">'w'</span>, <span class="String">'W'</span>]

<span class="vimCommand">const</span> <span class="vimVar">s:HI_ARGS</span> <span class="vimOper">=</span> [<span class="String">'gui'</span>, <span class="String">'guifg'</span>, <span class="String">'guibg'</span>, <span class="String">'guisp'</span>, <span class="String">'font'</span>]

<span class="vimCommand">const</span> <span class="vimVar">s:SPEC_ATTR</span> <span class="vimOper">=</span> [[<span class="String">'bold'</span>, <span class="String">'wght'</span>], [<span class="String">'italic'</span>, <span class="String">'itlc'</span>],
<span class="vimContinue">  \</span> [<span class="String">'underline'</span>, <span class="String">'undlne'</span>], [<span class="String">'undercurl'</span>, <span class="String">'undcrl'</span>],
<span class="vimContinue">  \</span> [<span class="String">'reverse'</span>, <span class="String">'rvrs'</span>], [<span class="String">'inverse'</span>, <span class="String">'rvrs'</span>],
<span class="vimContinue">  \</span> [<span class="String">'strikethrough'</span>, <span class="String">'skthro'</span>], [<span class="String">'NONE'</span>, <span class="String">'rset'</span>],
<span class="vimContinue">  \</span> [<span class="String">'standout'</span>, <span class="String">'lum'</span>], [<span class="String">'nocombine'</span>, <span class="String">'ncomb'</span>]]

<span class="vimCommand">const</span> <span class="vimVar">s:INIT_GRP</span> <span class="vimOper">=</span> [<span class="String">'Normal'</span>, <span class="String">'ColorColumn'</span>, <span class="String">'Conceal'</span>, <span class="String">'Cursor'</span>, <span class="String">'CursorColumn'</span>,
<span class="vimContinue">  \</span> <span class="String">'CursorIM'</span>, <span class="String">'CursorLine'</span>, <span class="String">'CursorLineNr'</span>, <span class="String">'DiffAdd'</span>, <span class="String">'DiffChange'</span>,
<span class="vimContinue">  \</span> <span class="String">'DiffDelete'</span>, <span class="String">'DiffText'</span>, <span class="String">'Directory'</span>, <span class="String">'EndOfBuffer'</span>, <span class="String">'ErrorMsg'</span>,
<span class="vimContinue">  \</span> <span class="String">'FoldColumn'</span>, <span class="String">'Folded'</span>, <span class="String">'IncSearch'</span>, <span class="String">'LineNr'</span>, <span class="String">'LineNrAbove'</span>,
<span class="vimContinue">  \</span> <span class="String">'LineNrBelow'</span>, <span class="String">'MatchParen'</span>, <span class="String">'ModeMsg'</span>, <span class="String">'MoreMsg'</span>, <span class="String">'NonText'</span>, <span class="String">'Pmenu'</span>,
<span class="vimContinue">  \</span> <span class="String">'PmenuSbar'</span>, <span class="String">'PmenuSel'</span>, <span class="String">'PmenuThumb'</span>, <span class="String">'Question'</span>, <span class="String">'QuickFixLine'</span>,
<span class="vimContinue">  \</span> <span class="String">'Search'</span>, <span class="String">'SignColumn'</span>, <span class="String">'SpecialKey'</span>, <span class="String">'SpellBad'</span>, <span class="String">'SpellCap'</span>,
<span class="vimContinue">  \</span> <span class="String">'SpellLocal'</span>, <span class="String">'SpellRare'</span>, <span class="String">'StatusLine'</span>, <span class="String">'StatusLineNC'</span>, <span class="String">'StatusLineTerm'</span>,
<span class="vimContinue">  \</span> <span class="String">'StatusLineTermNC'</span>, <span class="String">'TabLine'</span>, <span class="String">'TabLineFill'</span>, <span class="String">'TabLineSel'</span>, <span class="String">'Terminal'</span>,
<span class="vimContinue">  \</span> <span class="String">'Title'</span>, <span class="String">'VertSplit'</span>, <span class="String">'Visual'</span>, <span class="String">'VisualNOS'</span>, <span class="String">'WarningMsg'</span>, <span class="String">'WildMenu'</span>,
<span class="vimContinue">  \</span> <span class="String">'lCursor'</span>]

<span class="vimLet">let</span> <span class="vimVar">s:NME_TMP_BUF</span> <span class="vimOper">=</span> <span class="String">'Tmp_Colo2CSS'</span>
<span class="vimCommand">lockvar</span> <span class="vimVar">s:NME_TMP_BUF</span>
<span class="vimLet">let</span> <span class="vimVar">s:is_norm</span> <span class="vimOper">=</span> <span class="Number">0</span>
<span class="vimLet">let</span> <span class="vimVar">s:bg_norm</span> <span class="vimOper">=</span> <span class="String">''</span>
<span class="vimLet">let</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">=</span> <span class="String">''</span>
<span class="vimLet">let</span> <span class="vimVar">s:old_val</span> <span class="vimOper">=</span> <span class="Delimiter">{}</span>



<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">HiGroups2Buf</span><span class="vimParenSep">()</span>
  <span class="vimCommand">set</span> <span class="PreProc">hidden</span> <span class="PreProc">lazyredraw</span> <span class="PreProc">nomore</span> <span class="PreProc">noshowcmd</span> <span class="PreProc">noruler</span> <span class="PreProc">nospell</span> <span class="PreProc">nowrapscan</span>
  <span class="vimCommand">set</span> <span class="PreProc">whichwrap</span><span class="PreProc">&amp;</span> <span class="PreProc">verbose</span>=0 <span class="PreProc">report</span>=99999 <span class="PreProc">shortmess</span>=aAoOsStTWIcF
  <span class="vimCommand">redir</span> <span class="SpecialChar">@u</span>
  <span class="vimCommand">silent</span> <span class="vimCommand">highlight</span>
  <span class="vimCommand">redir</span> <span class="vimIsCommand">END</span>
  <span class="vimCommand">execute</span> <span class="String">'edit '</span> <span class="vimOper">..</span> <span class="vimVar">s:NME_TMP_BUF</span>
  <span class="vimCommand">setlocal</span> <span class="PreProc">textwidth</span>=0
  <span class="vimCommand">setlocal</span> <span class="PreProc">noautoindent</span> <span class="PreProc">noexpandtab</span> <span class="PreProc">formatoptions</span>=<span class="String">&quot;&quot;</span>
  <span class="vimCommand">setlocal</span> <span class="PreProc">noswapfile</span>
  <span class="vimCommand">setlocal</span> <span class="PreProc">buftype</span>=nofile
  <span class="vimCommand">put</span> <span class="vimCommand">u</span>
  <span class="vimCommand">silent</span><span class="vimOper">!</span> <span class="Statement">global/</span> cleared$<span class="Statement">/</span><span class="vimCommand">delete</span>
  <span class="Number">%</span><span class="vimCommand">substitute</span><span class="Delimiter">/</span>xxx <span class="Delimiter">//</span><span class="Special">e</span>
  <span class="vimCommand">silent</span><span class="vimOper">!</span> <span class="Statement">global/</span>^\s\+\w\+<span class="Statement">/</span><span class="vimOper">.-</span>1join
  <span class="vimCommand">silent</span><span class="vimOper">!</span> <span class="Statement">global/</span>^\s*$<span class="Statement">/</span><span class="vimCommand">delete</span>
  <span class="vimCommand">call</span> <span class="vimFuncName">histdel</span><span class="vimParenSep">(</span><span class="String">&quot;search</span><span class="String">&quot;</span><span class="vimOperParen">, </span><span class="vimOper">-</span><span class="vimOperParen">1</span><span class="vimParenSep">)</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">GetEntry</span><span class="vimParenSep">(</span><span class="vimOperParen">bnr, lnr, cnr, offset, motion</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> @<span class="vimCommand">e</span> <span class="vimOper">=</span> <span class="String">''</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="vimFuncVar">a:bnr</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:lnr</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:cnr</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:offset</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
    <span class="vimCommand">execute</span> <span class="String">'normal &quot;ey'</span> <span class="vimOper">..</span> <span class="vimFuncVar">a:motion</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimFuncName">getreg</span><span class="vimParenSep">(</span><span class="String">'e'</span><span class="vimParenSep">)</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">Dec2Hex</span><span class="vimParenSep">(</span><span class="vimOperParen">str</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:hexdig</span><span class="vimOper">=</span>[<span class="Number">0</span>,<span class="Number">1</span>,<span class="Number">2</span>,<span class="Number">3</span>,<span class="Number">4</span>,<span class="Number">5</span>,<span class="Number">6</span>,<span class="Number">7</span>,<span class="Number">8</span>,<span class="Number">9</span>,<span class="Number">'A</span>',<span class="Number">'B</span>',<span class="Number">'C</span>',<span class="Number">'D</span>',<span class="Number">'E</span>',<span class="Number">'F</span>']
  <span class="vimLet">let</span> <span class="vimVar">l:hex</span><span class="vimOper">=</span><span class="String">''</span>
  <span class="vimLet">let</span> <span class="vimVar">l:num</span><span class="vimOper">=</span><span class="vimFuncName">str2nr</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:str</span><span class="vimOperParen">, </span><span class="Number">10</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimVar">l:num</span>
    <span class="vimNotFunc">return</span> <span class="Number">0</span> <span class="vimOper">..</span> <span class="vimVar">l:num</span>
  <span class="vimNotFunc">else</span>
    <span class="vimNotFunc">while</span> <span class="vimVar">l:num</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hex</span><span class="vimOper">=</span><span class="vimVar">l:hexdig</span>[<span class="vimVar">l:num</span>%<span class="Number">16</span>] <span class="vimOper">..</span> <span class="vimVar">l:hex</span>
      <span class="vimLet">let</span> <span class="vimVar">l:num</span>/<span class="vimOper">=</span><span class="Number">16</span>
  <span class="vimCommand">endwhile</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">if</span> <span class="Number">255</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">str2nr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hex, </span><span class="Number">16</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimParenSep">((</span><span class="Number">2</span><span class="vimOperParen"> </span><span class="vimOper">&gt;</span><span class="vimOperParen"> </span><span class="vimFuncName">len</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hex</span><span class="vimParenSep">))</span><span class="vimOperParen"> ? </span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> l:hex : l:hex</span><span class="vimParenSep">)</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">RGB2HSB</span><span class="vimParenSep">(</span><span class="vimOperParen">hexcolo</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimParenSep">(</span><span class="Number">6</span><span class="vimOperParen"> </span><span class="vimOper">==</span><span class="vimOperParen"> </span><span class="vimFuncName">len</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimParenSep">))</span>
    <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimFuncName">str2nr</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimOperParen">[</span><span class="Number">0</span><span class="vimOperParen">:</span><span class="Number">1</span><span class="vimOperParen">], </span><span class="Number">16</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimFuncName">str2nr</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimOperParen">[</span><span class="Number">2</span><span class="vimOperParen">:</span><span class="Number">3</span><span class="vimOperParen">], </span><span class="Number">16</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimFuncName">str2nr</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimOperParen">[</span><span class="Number">4</span><span class="vimOperParen">:</span><span class="Number">5</span><span class="vimOperParen">], </span><span class="Number">16</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:max</span> <span class="vimOper">=</span> <span class="vimFuncName">max</span><span class="vimParenSep">(</span><span class="vimOperParen">[l:rr, l:gg, l:bb]</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:min</span> <span class="vimOper">=</span> <span class="vimFuncName">min</span><span class="vimParenSep">(</span><span class="vimOperParen">[l:rr, l:gg, l:bb]</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:rr</span> /<span class="vimOper">=</span> <span class="Number">255.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:gg</span> /<span class="vimOper">=</span> <span class="Number">255.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:bb</span> /<span class="vimOper">=</span> <span class="Number">255.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:max</span> /<span class="vimOper">=</span> <span class="Number">255.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:min</span> /<span class="vimOper">=</span> <span class="Number">255.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:dlt</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span> <span class="vimOper">-</span> <span class="vimVar">l:min</span>
    <span class="vimNotFunc">if</span> <span class="vimVar">l:max</span> <span class="vimOper">!=</span> <span class="vimVar">l:min</span>
      <span class="vimNotFunc">if</span> <span class="vimVar">l:max</span> <span class="vimOper">==</span> <span class="vimVar">l:rr</span>
	<span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:gg </span><span class="vimOper">-</span><span class="vimOperParen"> l:bb</span><span class="vimParenSep">)</span> / <span class="vimVar">l:dlt</span> <span class="vimOper">+</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:gg </span><span class="vimOper">&lt;</span><span class="vimOperParen"> l:bb ? </span><span class="Number">6</span><span class="vimOperParen"> : </span><span class="Number">0</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="vimVar">l:max</span> <span class="vimOper">==</span> <span class="vimVar">l:gg</span>
	<span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:bb </span><span class="vimOper">-</span><span class="vimOperParen"> l:rr</span><span class="vimParenSep">)</span> / <span class="vimVar">l:dlt</span> <span class="vimOper">+</span> <span class="Number">2</span>
      <span class="vimNotFunc">elseif</span> <span class="vimVar">l:max</span> <span class="vimOper">==</span> <span class="vimVar">l:bb</span>
	<span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:rr </span><span class="vimOper">-</span><span class="vimOperParen"> l:gg</span><span class="vimParenSep">)</span> / <span class="vimVar">l:dlt</span> <span class="vimOper">+</span> <span class="Number">4</span>
      <span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimOperParen">l:h * </span><span class="Number">60</span><span class="vimParenSep">))</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="Number">0</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">==</span> <span class="vimVar">l:max</span>
      <span class="vimLet">let</span> <span class="vimVar">l:h</span> <span class="vimOper">=</span> <span class="Number">0</span>
      <span class="vimLet">let</span> <span class="vimVar">l:s</span> <span class="vimOper">=</span> <span class="Number">0</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:s</span> <span class="vimOper">=</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">((</span><span class="vimOperParen">l:dlt / l:max</span><span class="vimParenSep">)</span><span class="vimOperParen"> * </span><span class="Number">100</span><span class="vimParenSep">)</span>
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:b</span> <span class="vimOper">=</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:max * </span><span class="Number">100</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">return</span> [<span class="vimVar">l:h</span>, <span class="vimVar">l:s</span>, <span class="vimVar">l:b</span>]
  <span class="vimNotFunc">else</span>
    <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
  <span class="vimCommand">endif</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">HSB2RGB</span><span class="vimParenSep">(</span><span class="vimOperParen">h, s, b</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimParenSep">((</span><span class="Number">360</span><span class="vimOperParen"> </span><span class="vimOper">&gt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:h</span><span class="vimParenSep">)</span><span class="vimOperParen"> </span><span class="vimOper">&amp;&amp;</span><span class="vimOperParen"> </span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&lt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:h</span><span class="vimParenSep">))</span> <span class="vimOper">&amp;&amp;</span> <span class="vimParenSep">((</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">&gt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:s</span><span class="vimParenSep">)</span><span class="vimOperParen"> </span><span class="vimOper">&amp;&amp;</span><span class="vimOperParen"> </span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&lt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:s</span><span class="vimParenSep">))</span>
<span class="vimContinue">	\</span> <span class="vimOper">&amp;&amp;</span> <span class="vimParenSep">((</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">&gt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:b</span><span class="vimParenSep">)</span><span class="vimOperParen"> </span><span class="vimOper">&amp;&amp;</span><span class="vimOperParen"> </span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&lt;=</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:b</span><span class="vimParenSep">))</span>
    <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">==</span> <span class="vimFuncVar">a:s</span>
      <span class="vimNotFunc">return</span> [
<span class="vimContinue">	      \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:b</span><span class="vimOperParen"> * </span><span class="Number">2.55</span><span class="vimParenSep">))</span>,
<span class="vimContinue">	      \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:b</span><span class="vimOperParen"> * </span><span class="Number">2.55</span><span class="vimParenSep">))</span>,
<span class="vimContinue">	      \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:b</span><span class="vimOperParen"> * </span><span class="Number">2.55</span><span class="vimParenSep">))</span>
<span class="vimContinue">	      \</span> ]
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:max</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:b</span> / <span class="Number">100.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:chrm</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimFuncVar">a:s</span><span class="vimOperParen"> * </span><span class="vimFuncVar">a:b</span><span class="vimParenSep">)</span> / <span class="Number">10000.0</span>
    <span class="vimLet">let</span> <span class="vimVar">l:min</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span> <span class="vimOper">-</span> <span class="vimVar">l:chrm</span>
    <span class="vimNotFunc">if</span> <span class="Number">300</span> <span class="vimOper">&lt;=</span> <span class="vimFuncVar">a:h</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hdrtv</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimFuncVar">a:h</span><span class="vimOperParen"> </span><span class="vimOper">-</span><span class="vimOperParen"> </span><span class="Number">360</span><span class="vimParenSep">)</span> / <span class="Number">60.0</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">300</span> <span class="vimOper">&gt;</span> <span class="vimFuncVar">a:h</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hdrtv</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:h</span> / <span class="Number">60.0</span>
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">floor</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hdrtv</span><span class="vimParenSep">))</span>
    <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">==</span> <span class="vimVar">l:idx</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">+</span> <span class="vimVar">l:hdrtv</span> * <span class="vimVar">l:chrm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">1</span> <span class="vimOper">==</span> <span class="vimVar">l:idx</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">-</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:hdrtv </span><span class="vimOper">-</span><span class="vimOperParen"> </span><span class="Number">2</span><span class="vimParenSep">)</span> * <span class="vimVar">l:chrm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">2</span> <span class="vimOper">==</span> <span class="vimVar">l:idx</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">+</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:hdrtv </span><span class="vimOper">-</span><span class="vimOperParen"> </span><span class="Number">2</span><span class="vimParenSep">)</span> * <span class="vimVar">l:chrm</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">3</span> <span class="vimOper">==</span> <span class="vimVar">l:idx</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">-</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:hdrtv </span><span class="vimOper">-</span><span class="vimOperParen"> </span><span class="Number">4</span><span class="vimParenSep">)</span> * <span class="vimVar">l:chrm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">4</span> <span class="vimOper">==</span> <span class="vimVar">l:idx</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">+</span> <span class="vimParenSep">(</span><span class="vimOperParen">l:hdrtv </span><span class="vimOper">-</span><span class="vimOperParen"> </span><span class="Number">4</span><span class="vimParenSep">)</span> * <span class="vimVar">l:chrm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rr</span> <span class="vimOper">=</span> <span class="vimVar">l:max</span>
      <span class="vimLet">let</span> <span class="vimVar">l:gg</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bb</span> <span class="vimOper">=</span> <span class="vimVar">l:min</span> <span class="vimOper">-</span> <span class="vimVar">l:hdrtv</span> * <span class="vimVar">l:chrm</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">return</span> [
<span class="vimContinue">	    \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rr * </span><span class="Number">255</span><span class="vimParenSep">))</span>,
<span class="vimContinue">	    \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimOperParen">l:gg * </span><span class="Number">255</span><span class="vimParenSep">))</span>,
<span class="vimContinue">	    \</span> <span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">ceil</span><span class="vimParenSep">(</span><span class="vimOperParen">l:bb * </span><span class="Number">255</span><span class="vimParenSep">))</span>
<span class="vimContinue">	    \</span> ]
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">BrightColo</span><span class="vimParenSep">(</span><span class="vimOperParen">hexcolo, prcnt, lord</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">=</span> <span class="String">''</span>
  <span class="vimLet">let</span> <span class="vimVar">l:colo</span> <span class="vimOper">=</span> <span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hexcolo</span><span class="vimOperParen">, </span><span class="String">'#'</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:prcnt</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">&lt;</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:prcnt</span><span class="vimOperParen"> ? </span><span class="Number">100</span><span class="vimOperParen"> : </span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&gt;</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:prcnt</span><span class="vimOperParen"> ? </span><span class="Number">0</span><span class="vimOperParen"> : </span><span class="vimFuncVar">a:prcnt</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:hsb</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">RGB2HSB</span><span class="vimParenSep">(</span><span class="vimOperParen">l:colo</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="String">'l'</span> <span class="vimOper">==?</span> <span class="vimFuncVar">a:lord</span>
    <span class="vimNotFunc">if</span> <span class="Number">99</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>]
      <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">1</span>] <span class="vimOper">=</span> <span class="vimVar">l:hsb</span>[<span class="Number">1</span>] <span class="vimOper">-</span> <span class="vimVar">l:prcnt</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>] <span class="vimOper">=</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>] <span class="vimOper">+</span> <span class="vimVar">l:prcnt</span>
    <span class="vimCommand">endif</span>
  <span class="vimNotFunc">elseif</span> <span class="String">'d'</span> <span class="vimOper">==?</span> <span class="vimFuncVar">a:lord</span>
    <span class="vimNotFunc">if</span> <span class="Number">1</span> <span class="vimOper">&gt;=</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>]
      <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">1</span>] <span class="vimOper">+=</span> <span class="vimVar">l:prcnt</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>] <span class="vimOper">-=</span> <span class="vimVar">l:prcnt</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">1</span>] <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">&lt;</span><span class="vimOperParen"> l:hsb[</span><span class="Number">1</span><span class="vimOperParen">] ? </span><span class="Number">100</span><span class="vimOperParen"> : </span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&gt;</span><span class="vimOperParen"> l:hsb[</span><span class="Number">1</span><span class="vimOperParen">] ? </span><span class="Number">0</span><span class="vimOperParen"> : l:hsb[</span><span class="Number">1</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:hsb</span>[<span class="Number">2</span>] <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">&lt;</span><span class="vimOperParen"> l:hsb[</span><span class="Number">2</span><span class="vimOperParen">] ? </span><span class="Number">100</span><span class="vimOperParen"> : </span><span class="Number">0</span><span class="vimOperParen"> </span><span class="vimOper">&gt;</span><span class="vimOperParen"> l:hsb[</span><span class="Number">2</span><span class="vimOperParen">] ? </span><span class="Number">0</span><span class="vimOperParen"> : l:hsb[</span><span class="Number">2</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> <span class="vimVar">l:rgb</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HSB2RGB</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hsb[</span><span class="Number">0</span><span class="vimOperParen">], l:hsb[</span><span class="Number">1</span><span class="vimOperParen">], l:hsb[</span><span class="Number">2</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
  <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
  <span class="vimCommand">for</span> <span class="vimVar">l:cc</span> <span class="vimCommand">in</span> <span class="vimVar">l:rgb</span>
    <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">Dec2Hex</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cc</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span> <span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimOper">+</span><span class="Number">0</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">=</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">..</span> <span class="SpecialChar">@u</span>
  <span class="vimCommand">endfor</span>
  <span class="vimNotFunc">return</span> <span class="String">'#'</span> <span class="vimOper">..</span> <span class="vimVar">l:hexcolo</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">ColoStr2ColoNum</span><span class="vimParenSep">(</span><span class="vimOperParen">colostr</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">)</span>
    <span class="vimCommand">for</span> <span class="vimVar">l:nrgb</span> <span class="vimCommand">in</span> <span class="vimVar">s:NOT_RGB</span>
      <span class="vimNotFunc">if</span> <span class="vimVar">a:colostr</span> <span class="vimOper">==?</span> <span class="vimVar">l:nrgb</span>[<span class="Number">0</span>]
	<span class="vimNotFunc">return</span> <span class="vimVar">l:nrgb</span>[<span class="Number">1</span>]
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endfor</span>
    <span class="vimNotFunc">if</span> <span class="Number">8023562</span> <span class="vimOper">&lt;=</span> <span class="vimVar">v:versionlong</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">exists</span><span class="vimParenSep">(</span><span class="String">'v:colornames'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimOperParen">v:colornames, </span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">))</span>
	<span class="vimNotFunc">return</span> <span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimOperParen">v:colornames[</span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">)</span><span class="vimOperParen">][</span><span class="Number">1</span><span class="vimOperParen">:]</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span> <span class="String">''</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'win32'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'SYS_'</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span> <span class="vimFuncName">system</span><span class="vimParenSep">(</span>
<span class="vimContinue">\</span><span class="vimOperParen"> </span><span class="String">&quot;powershell Get-ItemProperty -Path 'Registry::HKCU</span><span class="String">\\</span><span class="String">Control Panel</span><span class="String">\\</span><span class="String">Colors' -Name </span><span class="String">&quot;</span>
<span class="vimContinue">\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> s:WINSYS_COLO[</span><span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">)</span><span class="vimOperParen">][</span><span class="Number">0</span><span class="vimOperParen">] </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot; ^| Select-Object -ExpandProperty </span><span class="String">&quot;</span>
<span class="vimContinue">\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> s:WINSYS_COLO[</span><span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colostr</span><span class="vimParenSep">)</span><span class="vimOperParen">][</span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="vimFuncName">filereadable</span><span class="vimParenSep">(</span><span class="PreProc">$VIMRUNTIME</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'/rgb.txt'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span>
<span class="vimContinue">	  \</span> <span class="vimFuncName">system</span><span class="vimParenSep">(</span><span class="String">&quot;powershell Select-String -Path </span><span class="String">&quot;</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="PreProc">$VIMRUNTIME</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot;</span><span class="String">\\</span><span class="String">rgb.txt -Pattern </span><span class="String">&quot;</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot;'</span><span class="String">\\</span><span class="String">t</span><span class="String">&quot;</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="vimFuncVar">a:colostr</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot;$'</span><span class="String">&quot;</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot; ^| </span><span class="String">&quot;</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">&quot;Select-Object -ExpandProperty Line</span><span class="String">&quot;</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimNotFunc">elseif</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'unix'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">filereadable</span><span class="vimParenSep">(</span><span class="PreProc">$VIMRUNTIME</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'/rgb.txt'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span>
<span class="vimContinue">	  \</span> <span class="vimFuncName">system</span><span class="vimParenSep">(</span><span class="String">'grep -i -h -w -e &quot;[[:space:]]'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimFuncVar">a:colostr</span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'$&quot; '</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="PreProc">$VIMRUNTIME</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'/rgb.txt'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rgbcolo</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">=</span> <span class="String">''</span>
      <span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rgbcolo, </span><span class="String">'\d\{1,3}\s\+\d\{1,3}\s\+\d\{1,3}'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">while</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rgbcolo</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
	<span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rgbcolo, </span><span class="String">'^\d\{1,3}'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:rgbcolo</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:rgbcolo, @u </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'\s*'</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">Dec2Hex</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimOper">+</span><span class="Number">0</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">=</span> <span class="vimVar">l:hexcolo</span> <span class="vimOper">..</span> <span class="SpecialChar">@u</span>
      <span class="vimCommand">endwhile</span>
      <span class="vimNotFunc">return</span> <span class="vimVar">l:hexcolo</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">GetColor</span><span class="vimParenSep">(</span><span class="vimOperParen">coloval</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="String">'#'</span> <span class="vimOper">==</span> <span class="vimFuncVar">a:coloval</span>[<span class="Number">0</span>:<span class="Number">0</span>]
      <span class="vimNotFunc">return</span> <span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'bg'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span>
<span class="vimContinue">		    \</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'background'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">return</span> <span class="String">'bg'</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'fg'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span>
<span class="vimContinue">		    \</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">tolower</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'foreground'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">return</span> <span class="String">'fg'</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimFuncName">toupper</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'NONE'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">return</span> <span class="String">'NONE'</span>
    <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimOperParen">, </span><span class="String">'\w\+'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">ColoStr2ColoNum</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:coloval</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> <span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimOper">+</span><span class="Number">0</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">return</span> <span class="String">'#'</span> <span class="vimOper">..</span> <span class="SpecialChar">@u</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction">! colo2css#GetInitFont</span><span class="vimParenSep">()</span>
  <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
  <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimFuncName">getfontname</span><span class="vimParenSep">()</span>
  <span class="vimNotFunc">if</span> <span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'X11'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> &amp;<span class="vimIsCommand">guifont</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> &amp;<span class="vimIsCommand">guifontset</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:cmm</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">@u, </span><span class="String">'\w,'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimVar">l:cmm</span>
	<span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimFuncName">strpart</span><span class="vimParenSep">(</span><span class="vimOperParen">@u, </span><span class="Number">0</span><span class="vimOperParen">, l:cmm</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimFuncName">getreg</span><span class="vimParenSep">(</span><span class="String">'u'</span><span class="vimParenSep">)</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">ParseFont</span><span class="vimParenSep">(</span><span class="vimOperParen">fntval</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:fntval</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span> <span class="vimOper">=</span> <span class="Delimiter">{}</span>
    <span class="vimNotFunc">if</span> <span class="String">'NONE'</span> <span class="vimOper">==?</span> <span class="vimFuncVar">a:fntval</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> colo2css#<span class="Normal">GetInitFont</span><span class="vimParenSep">()</span>
    <span class="vimNotFunc">else</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:fntval</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_win32'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'\'</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">'g'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:cln</span> <span class="vimOper">=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimVar">l:cln</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimFuncName">tr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt[</span><span class="Number">0</span><span class="vimOperParen">:l:cln</span><span class="vimOper">-</span><span class="vimOperParen">1], </span><span class="String">'_'</span><span class="vimOperParen">, </span><span class="String">' '</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimVar">l:cln</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimFuncName">tr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'_'</span><span class="vimOperParen">, </span><span class="String">' '</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimCommand">for</span> <span class="vimVar">l:fntsze</span> <span class="vimCommand">in</span> <span class="vimVar">s:FNT_SIZE</span>
	<span class="vimLet">let</span> <span class="vimVar">l:sze</span> <span class="vimOper">=</span>
<span class="vimContinue">	  \</span> <span class="vimFuncName">matchlist</span><span class="vimParenSep">(</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> l:hifnt, </span><span class="String">'\C\(:'</span><span class="vimOper">..</span><span class="vimOperParen">l:fntsze</span><span class="vimOper">..</span><span class="String">'\)\(\d\{1,}\.\{,1}\d\{}\)'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:sze</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="String">'h'</span> <span class="vimOper">==</span> <span class="vimVar">l:fntsze</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fnthght'</span>] <span class="vimOper">=</span> <span class="vimVar">l:sze</span>[<span class="Number">2</span>]
	    <span class="vimCommand">continue</span>
	  <span class="vimNotFunc">elseif</span> <span class="String">'w'</span> <span class="vimOper">==#</span> <span class="vimVar">l:fntsze</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntwdth'</span>] <span class="vimOper">=</span> <span class="vimVar">l:sze</span>[<span class="Number">2</span>]
	    <span class="vimCommand">continue</span>
	  <span class="vimNotFunc">elseif</span> <span class="String">'W'</span> <span class="vimOper">==#</span> <span class="vimVar">l:fntsze</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntwght'</span>] <span class="vimOper">=</span> <span class="vimVar">l:sze</span>[<span class="Number">2</span>]
	  <span class="vimCommand">endif</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endfor</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':b'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntbold'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':i'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntitlc'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':u'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntundr'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':s'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntsout'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">return</span> <span class="vimVar">l:fnt</span>
    <span class="vimNotFunc">elseif</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_gtk2'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_gtk3'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'\'</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">'g'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'\s\+\d\+$'</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fnthght'</span>] <span class="vimOper">=</span> <span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'\s\d\+$'</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">' '</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">return</span> <span class="vimVar">l:fnt</span>
    <span class="vimNotFunc">elseif</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'X11'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncName">split</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'-'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt[</span><span class="Number">1</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="String">'*'</span> <span class="vimOper">!=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">1</span>]
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">1</span>]
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="String">'bold'</span> <span class="vimOper">==?</span> <span class="vimVar">l:hifnt</span>[<span class="Number">2</span>]
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntbold'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="String">'i'</span> <span class="vimOper">==?</span> <span class="vimVar">l:hifnt</span>[<span class="Number">3</span>] <span class="vimOper">||</span> <span class="String">'o'</span> <span class="vimOper">==?</span> <span class="vimVar">l:hifnt</span>[<span class="Number">3</span>]
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntitlc'</span>] <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt[</span><span class="Number">4</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="String">'0'</span> <span class="vimOper">!=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">4</span>] <span class="vimOper">&amp;&amp;</span> <span class="String">'*'</span> <span class="vimOper">!=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">4</span>]
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntwdth'</span>] <span class="vimOper">=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">4</span>]
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt[</span><span class="Number">7</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="String">'['</span> <span class="vimOper">!=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">7</span>][<span class="Number">0</span>:<span class="Number">0</span>] <span class="vimOper">&amp;&amp;</span> <span class="String">'*'</span> <span class="vimOper">!=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">7</span>]
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fnthght'</span>] <span class="vimOper">=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">7</span>]
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">return</span> <span class="vimVar">l:fnt</span>
    <span class="vimNotFunc">elseif</span> <span class="vimFuncName">has</span> <span class="vimParenSep">(</span><span class="String">'gui_mac'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncName">tr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'_'</span><span class="vimOperParen">, </span><span class="String">' '</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hifnt</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">'\'</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">'g'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:cln</span> <span class="vimOper">=</span> <span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hifnt, </span><span class="String">':'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimVar">l:cln</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimVar">l:hifnt</span>[<span class="Number">0</span>:<span class="vimCommand">l</span>:cln<span class="vimOper">-</span>1]
      <span class="vimNotFunc">elseif</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimVar">l:cln</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fntname'</span>] <span class="vimOper">=</span> <span class="vimVar">l:hifnt</span>
      <span class="vimCommand">endif</span>
      <span class="vimLet">let</span> <span class="vimVar">l:sze</span> <span class="vimOper">=</span> <span class="vimFuncName">matchlist</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'\C\(:'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen">s:FNT_SIZE[</span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimOper">..</span><span class="String">'\)\(\d\{1,}\)'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:sze</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fnt</span>[<span class="String">'fnthght'</span>] <span class="vimOper">=</span> <span class="vimVar">l:sze</span>[<span class="Number">2</span>]
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">return</span> <span class="vimVar">l:fnt</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">ParseHiArgs</span><span class="vimParenSep">(</span><span class="vimOperParen">grplnr</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grplnr</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span> <span class="vimOper">=</span> <span class="Delimiter">{}</span>
    <span class="vimLet">let</span> <span class="vimVar">l:str</span> <span class="vimOper">=</span> <span class="vimFuncName">getline</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grplnr</span><span class="vimParenSep">)</span>
    <span class="vimCommand">for</span> <span class="vimVar">l:hiarg</span> <span class="vimCommand">in</span> <span class="vimVar">s:HI_ARGS</span>
      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
      <span class="vimLet">let</span> <span class="vimVar">l:pos</span> <span class="vimOper">=</span> <span class="vimFuncName">matchend</span><span class="vimParenSep">(</span><span class="vimOperParen">l:str, l:hiarg </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'='</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:pos</span>
	<span class="vimNotFunc">if</span> <span class="String">'gui'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetEntry</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:grplnr</span><span class="vimOperParen">, l:pos</span><span class="vimOper">+</span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">, </span><span class="String">'E'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="Number">0</span>
	  <span class="vimNotFunc">while</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimVar">l:idx</span> <span class="vimOper">&lt;</span> <span class="vimFuncName">len</span><span class="vimParenSep">(</span><span class="vimOperParen">s:SPEC_ATTR</span><span class="vimParenSep">)</span>
	    <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimParenSep">(</span><span class="vimFuncName">stridx</span><span class="vimParenSep">(</span><span class="vimOperParen">@u, s:SPEC_ATTR[l:idx][</span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">))</span>
	      <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="vimVar">s:SPEC_ATTR</span>[<span class="vimVar">l:idx</span>][<span class="Number">1</span>]] <span class="vimOper">=</span> <span class="Number">1</span>
	      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span>
<span class="vimContinue">		\</span><span class="vimCommand"> substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">@u, s:SPEC_ATTR[l:idx][</span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimOper">..</span><span class="String">'\%(,\|\s\)\='</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimParenSep">)</span>
	    <span class="vimCommand">endif</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">+=</span> <span class="Number">1</span>
	  <span class="vimCommand">endwhile</span>
	<span class="vimNotFunc">elseif</span> <span class="String">'guifg'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span> <span class="vimOper">||</span> <span class="String">'guibg'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span> <span class="vimOper">||</span> <span class="String">'guisp'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:pos2</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:str, </span><span class="String">'\%( gui\| font\|$\)'</span><span class="vimOperParen">, l:pos</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;</span> <span class="vimVar">l:pos2</span>
	    <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetEntry</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:grplnr</span><span class="vimOperParen">, l:pos</span><span class="vimOper">+</span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">, </span><span class="vimParenSep">(</span><span class="vimOperParen">l:pos2</span><span class="vimOper">-</span><span class="vimOperParen">l:pos</span><span class="vimParenSep">)</span><span class="vimOper">..</span><span class="String">'l'</span><span class="vimParenSep">)</span>
	    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	      <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetColor</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> <span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimOper">+</span><span class="Number">0</span><span class="vimParenSep">)</span>
		<span class="vimNotFunc">if</span> <span class="String">'guifg'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
		  <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="String">'fgco'</span>] <span class="vimOper">=</span> <span class="vimFuncName">getreg</span><span class="vimParenSep">(</span><span class="String">'u'</span><span class="vimParenSep">)</span>
		<span class="vimNotFunc">elseif</span> <span class="String">'guibg'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
		  <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="String">'bgco'</span>] <span class="vimOper">=</span> <span class="vimFuncName">getreg</span><span class="vimParenSep">(</span><span class="String">'u'</span><span class="vimParenSep">)</span>
		<span class="vimNotFunc">elseif</span> <span class="String">'guisp'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
		  <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="String">'spco'</span>] <span class="vimOper">=</span> <span class="vimFuncName">getreg</span><span class="vimParenSep">(</span><span class="String">'u'</span><span class="vimParenSep">)</span>
		<span class="vimCommand">endif</span>
	      <span class="vimCommand">endif</span>
	    <span class="vimCommand">endif</span>
	  <span class="vimCommand">endif</span>
	<span class="vimNotFunc">elseif</span> <span class="String">'font'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetEntry</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="vimFuncVar">a:grplnr</span><span class="vimOperParen">, l:pos</span><span class="vimOper">+</span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">, </span><span class="String">'g_'</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">ParseFont</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span>
	      <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="String">'font'</span>] <span class="vimOper">=</span> <span class="vimVar">l:fnt</span>
	    <span class="vimCommand">endif</span>
	  <span class="vimCommand">endif</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">elseif</span> <span class="vimVar">s:is_norm</span> <span class="vimOper">&amp;&amp;</span> <span class="String">'font'</span> <span class="vimOper">==</span> <span class="vimVar">l:hiarg</span>
	<span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> colo2css#<span class="Normal">GetInitFont</span><span class="vimParenSep">()</span>
	<span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:fnt</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">ParseFont</span><span class="vimParenSep">(</span><span class="vimOperParen">@u</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span>[<span class="String">'font'</span>] <span class="vimOper">=</span> <span class="vimVar">l:fnt</span>
	  <span class="vimCommand">endif</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endfor</span>
    <span class="vimNotFunc">return</span> <span class="vimVar">l:hiattr</span>
  <span class="vimNotFunc">elseif</span> <span class="vimVar">s:is_norm</span>
    <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span> <span class="vimOper">=</span> <span class="Delimiter">{</span><span class="String">'font'</span><span class="vimOperParen">:</span><span class="String">''</span><span class="Delimiter">}</span>
    <span class="vimNotFunc">return</span> <span class="vimVar">l:hiattr</span>
  <span class="vimNotFunc">else</span>
    <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
  <span class="vimCommand">endif</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">HiAttr2CssDecl</span><span class="vimParenSep">(</span><span class="vimOperParen">hiattrval</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span> <span class="vimOper">=</span> []
    <span class="vimLet">let</span> <span class="vimVar">l:fnt</span> <span class="vimOper">=</span> <span class="Delimiter">{}</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'font'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fnt</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:hiattrval</span>[<span class="String">'font'</span>]
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntname'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-family: &quot;'</span><span class="vimOper">..</span><span class="vimOperParen">l:fnt[</span><span class="String">'fntname'</span><span class="vimOperParen">]</span><span class="vimOper">..</span><span class="String">'&quot;, monospace;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fnthght'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_win32'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_gtk2'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_gtk3'</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui_mac'</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-size: '</span><span class="vimOper">..</span><span class="vimOperParen">l:fnt[</span><span class="String">'fnthght'</span><span class="vimOperParen">]</span><span class="vimOper">..</span><span class="String">'pt;'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">elseif</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'X11'</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-size: '</span><span class="vimOper">..</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt[</span><span class="String">'fnthght'</span><span class="vimOperParen">]/</span><span class="Number">10</span><span class="vimParenSep">)</span><span class="vimOper">..</span><span class="String">'pt;'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntwdt'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'X11'</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-stretch: '</span><span class="vimOper">..</span><span class="vimParenSep">(</span><span class="vimFuncName">tr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt[</span><span class="String">'fntwdt'</span><span class="vimOperParen">], </span><span class="String">' '</span><span class="vimOperParen">, </span><span class="String">'-'</span><span class="vimParenSep">))</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntwght'</span><span class="vimParenSep">)</span>
	    <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight: '</span><span class="vimOper">..</span><span class="vimOperParen">l:fnt[</span><span class="String">'fntwght'</span><span class="vimOperParen">]</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntbold'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'font-weight: bold;'</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight: bold;'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntitlc'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-style: italic;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimNotFunc">elseif</span> <span class="vimVar">s:is_norm</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-family: monospace;'</span><span class="vimParenSep">)</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'wght'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'bold'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'font-weight: bold;'</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight: bold;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'itlc'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-style:'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'italic'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'font-style: italic;'</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-style: italic;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'bgco'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:bgc</span> <span class="vimOper">=</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'bgco'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="String">'NONE'</span> <span class="vimOper">==?</span> <span class="vimVar">l:bgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: transparent;'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'bg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:bgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:bg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:bg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'fg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:bgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:fg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:fg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOper">..</span><span class="vimOperParen">l:bgc</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">s:bg_norm</span> <span class="vimOper">=</span> <span class="vimVar">s:is_norm</span> ? <span class="vimVar">l:bgc</span> : <span class="vimVar">s:bg_norm</span>
      <span class="vimCommand">endif</span>
    <span class="vimNotFunc">elseif</span> <span class="vimVar">s:is_norm</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: transparent;'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">s:bg_norm</span> <span class="vimOper">=</span> <span class="String">'#FFFFFF'</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'fgco'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fgc</span> <span class="vimOper">=</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'fgco'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="String">'NONE'</span> <span class="vimOper">==?</span> <span class="vimVar">l:fgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: inherit;'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'bg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:fgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:bg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:bg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'fg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:fgc</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:fg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:fg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOper">..</span><span class="vimOperParen">l:fgc</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">=</span> <span class="vimVar">s:is_norm</span> ? <span class="vimVar">l:fgc</span> : <span class="vimVar">s:fg_norm</span>
      <span class="vimCommand">endif</span>
    <span class="vimNotFunc">elseif</span> <span class="vimVar">s:is_norm</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: inherit;'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">=</span> <span class="String">'#000000'</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntundr'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration: underline;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fnt, </span><span class="String">'fntsout'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">';'</span><span class="vimOperParen">, </span><span class="Number">2</span><span class="vimParenSep">)</span><span class="vimOper">..</span><span class="String">' line-throught;'</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration: line-throught;'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'undlne'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'underline'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">';'</span><span class="vimOperParen">, </span><span class="Number">2</span><span class="vimParenSep">)</span><span class="vimOper">..</span><span class="String">' underline;'</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration: underline;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'skthro'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&gt;</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'line-throught'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">';'</span><span class="vimOperParen">, </span><span class="Number">2</span><span class="vimParenSep">)</span><span class="vimOper">..</span><span class="String">' line-throught;'</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration: line-throught;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'undcrl'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'text-decoration: underline;'</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;'</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;'</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' text-decoration-line: underline; text-decoration-style: wavy;'</span><span class="vimParenSep">)</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">has_key</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'spco'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:tdc</span> <span class="vimOper">=</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'spco'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="String">'NONE'</span> <span class="vimOper">==?</span> <span class="vimVar">l:tdc</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'-moz-text-decoration-color: currentColor;'</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -webkit-text-decoration-color: currentColor;'</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' text-decoration-color: currentColor;'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'bg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:tdc</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:bg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl,</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="String">'-moz-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:bg_norm</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -webkit-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:bg_norm</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:bg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">elseif</span> <span class="String">'fg'</span> <span class="vimOper">==?</span> <span class="vimVar">l:tdc</span>
	<span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:fg_norm</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl,</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="String">'-moz-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:fg_norm</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -webkit-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:fg_norm</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">		\</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">s:fg_norm</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'-moz-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">l:tdc</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' -webkit-text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">l:tdc</span><span class="vimOper">..</span><span class="String">';'</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' text-decoration-color: '</span><span class="vimOper">..</span><span class="vimOperParen">l:tdc</span><span class="vimOper">..</span><span class="String">';'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'rvrs'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">&amp;&amp;</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:bg_norm</span>
	<span class="vimLet">let</span> @<span class="vimCommand">i</span> <span class="vimOper">=</span> <span class="vimOper">-</span>1
	<span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="String">''</span>
	<span class="vimLet">let</span> @<span class="vimCommand">x</span> <span class="vimOper">=</span> <span class="vimOper">-</span>1
	<span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="String">''</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'\&lt;color'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">i</span> <span class="vimOper">=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'#\x\{6}'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">x</span> <span class="vimOper">=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'#\x\{6}'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
	<span class="vimNotFunc">if</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> @<span class="vimCommand">i</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> <span class="SpecialChar">@x</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">i</span>] <span class="vimOper">=</span> <span class="String">'color: '</span> <span class="vimOper">..</span> @<span class="vimCommand">b</span> <span class="vimOper">..</span> <span class="String">';'</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">x</span>] <span class="vimOper">=</span> <span class="String">'background-color: '</span> <span class="vimOper">..</span> @<span class="vimCommand">f</span> <span class="vimOper">..</span> <span class="String">';'</span>
	<span class="vimNotFunc">elseif</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> @<span class="vimCommand">i</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span> <span class="SpecialChar">@x</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">i</span>] <span class="vimOper">=</span> <span class="String">'color: '</span> <span class="vimOper">..</span> <span class="vimVar">s:bg_norm</span> <span class="vimOper">..</span> <span class="String">';'</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @f </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">elseif</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span> @<span class="vimCommand">i</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">!=</span> <span class="SpecialChar">@x</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @b </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">x</span>] <span class="vimOper">=</span> <span class="String">'background-color: '</span> <span class="vimOper">..</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">..</span> <span class="String">';'</span>
	<span class="vimNotFunc">elseif</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span> @<span class="vimCommand">i</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">-</span>1 <span class="vimOper">==</span> <span class="SpecialChar">@x</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> s:bg_norm </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> s:fg_norm </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'rset'</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimOper">!</span><span class="vimVar">s:is_norm</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'font-weight: normal;'</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-weight: normal;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-style'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'font-style: normal;'</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'font-style: normal;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span> <span class="String">'text-decoration: none;'</span>
      <span class="vimNotFunc">else</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration: none;'</span><span class="vimParenSep">)</span>
      <span class="vimCommand">endif</span>
      <span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'text-decoration-color'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	<span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimVar">l:idx</span>] <span class="vimOper">=</span>
<span class="vimContinue">		    \</span> <span class="String">'-moz-text-decoration-color: currentColor;'</span>
<span class="vimContinue">		    \</span> <span class="vimOper">..</span> <span class="String">' -webkit-text-decoration-color: currentColor;'</span>
<span class="vimContinue">		    \</span> <span class="vimOper">..</span> <span class="String">' text-decoration-color: currentColor;'</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">get</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:hiattrval</span><span class="vimOperParen">, </span><span class="String">'lum'</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:fg_norm</span> <span class="vimOper">&amp;&amp;</span> <span class="String">''</span> <span class="vimOper">!=</span> <span class="vimVar">s:bg_norm</span>
	<span class="vimLet">let</span> @<span class="vimCommand">i</span> <span class="vimOper">=</span> <span class="vimOper">-</span>1
	<span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="String">''</span>
	<span class="vimLet">let</span> @<span class="vimCommand">x</span> <span class="vimOper">=</span> <span class="vimOper">-</span>1
	<span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="String">''</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'\&lt;color'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">i</span> <span class="vimOper">=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'#\x\{6}'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="vimVar">s:fg_norm</span>
	<span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">l:idx</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">x</span> <span class="vimOper">=</span> <span class="vimVar">l:idx</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="vimFuncName">matchstr</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl[l:idx], </span><span class="String">'#\x\{6}'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="vimVar">s:bg_norm</span>
	<span class="vimCommand">endif</span>
	<span class="vimNotFunc">if</span> <span class="vimParenSep">(</span><span class="String">'#FFFFFF'</span><span class="vimOperParen"> </span><span class="vimOper">!=?</span><span class="vimOperParen"> @f</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimParenSep">(</span><span class="String">'#000000'</span><span class="vimOperParen"> </span><span class="vimOper">!=?</span><span class="vimOperParen"> @b</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">BrightColo</span><span class="vimParenSep">(</span><span class="vimOperParen">@f, </span><span class="Number">20</span><span class="vimOperParen">, </span><span class="String">'l'</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">BrightColo</span><span class="vimParenSep">(</span><span class="vimOperParen">@b, </span><span class="Number">10</span><span class="vimOperParen">, </span><span class="String">'d'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimLet">let</span> @<span class="vimIsCommand">F</span> <span class="vimOper">=</span> <span class="SpecialChar">@b</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">b</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">@f, </span><span class="String">'\c'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @b, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> @<span class="vimCommand">f</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">@f, </span><span class="String">'\c'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @b, </span><span class="String">''</span><span class="vimOperParen">, </span><span class="String">''</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="SpecialChar">@i</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">i</span>] <span class="vimOper">=</span> <span class="String">'color: '</span> <span class="vimOper">..</span> @<span class="vimCommand">f</span> <span class="vimOper">..</span> <span class="String">';'</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @f </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
	<span class="vimNotFunc">if</span> <span class="Number">0</span> <span class="vimOper">&lt;=</span> <span class="SpecialChar">@x</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[@<span class="vimCommand">x</span>] <span class="vimOper">=</span> <span class="String">'background-color: '</span> <span class="vimOper">..</span> @<span class="vimCommand">b</span> <span class="vimOper">..</span> <span class="String">';'</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl, </span><span class="String">'background-color: '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> @b </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">';'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
      <span class="vimNotFunc">else</span>
	<span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="Number">0</span>] <span class="vimOper">=</span> <span class="String">'{'</span> <span class="vimOper">..</span> <span class="vimVar">l:cssdecl</span>[<span class="Number">0</span>]
    <span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span>[<span class="vimOper">-</span>1] <span class="vimOper">=</span> <span class="vimVar">l:cssdecl</span>[<span class="vimOper">-</span>1] <span class="vimOper">..</span> <span class="String">'}'</span>
    <span class="vimNotFunc">return</span> <span class="vimVar">l:cssdecl</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">GetLnkGrp</span><span class="vimParenSep">(</span><span class="vimOperParen">grpname</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grpname</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">cursor</span><span class="vimParenSep">(</span><span class="Number">1</span><span class="vimOperParen">,</span><span class="Number">1</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:srchpat</span> <span class="vimOper">=</span> <span class="String">'links to\s\+'</span> <span class="vimOper">..</span> <span class="vimFuncVar">a:grpname</span> <span class="vimOper">..</span> <span class="String">'$'</span>
      <span class="vimLet">let</span> <span class="vimVar">l:srchflgs</span> <span class="vimOper">=</span> <span class="String">'cnW'</span>
      <span class="vimLet">let</span> <span class="vimVar">l:lnkgrpnm</span> <span class="vimOper">=</span> <span class="String">''</span>
      <span class="vimLet">let</span> <span class="vimVar">l:lnr</span> <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimNotFunc">while</span> <span class="vimVar">l:lnr</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimFuncName">search</span><span class="vimParenSep">(</span><span class="vimOperParen">l:srchpat, l:srchflgs, </span><span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">'$'</span><span class="vimParenSep">))</span>
	<span class="vimNotFunc">if</span> <span class="vimVar">l:fndlnr</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:lnkgrpnm</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetEntry</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen">, l:fndlnr, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">, </span><span class="String">'iw'</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:lnkgrpnm</span><span class="vimParenSep">)</span>
	    <span class="vimLet">let</span> @<span class="vimIsCommand">U</span> <span class="vimOper">=</span> <span class="String">' '</span><span class="vimOper">..</span><span class="vimVar">l:lnkgrpnm</span>
	  <span class="vimCommand">endif</span>
	  <span class="vimCommand">execute</span> <span class="vimVar">l:fndlnr</span>'<span class="vimVar">delete</span>'
	  <span class="vimCommand">call</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetLnkGrp</span><span class="vimParenSep">(</span><span class="vimOperParen">l:lnkgrpnm</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">l:lnr</span> <span class="vimOper">=</span> <span class="vimVar">l:fndlnr</span>
      <span class="vimCommand">endwhile</span>
      <span class="vimNotFunc">return</span> @<span class="vimIsCommand">U</span>
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">HiGrpNme2CssSel</span><span class="vimParenSep">(</span><span class="vimOperParen">grpname</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grpname</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span> <span class="String">''</span>
    <span class="vimLet">let</span> @<span class="vimCommand">u</span> <span class="vimOper">=</span> <span class="String">''</span>
    <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetLnkGrp</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grpname</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:csssel</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span> <span class="vimVar">s:is_norm</span> ? <span class="String">'*, .'</span><span class="vimOper">..</span><span class="vimFuncVar">a:grpname</span> : <span class="String">'.'</span><span class="vimOper">..</span><span class="vimFuncVar">a:grpname</span>
    <span class="vimNotFunc">elseif</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:csssel</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span> <span class="vimFuncName">substitute</span><span class="vimParenSep">(</span><span class="vimOperParen">l:csssel, </span><span class="String">'\%(\s\)\(\w\+\)'</span><span class="vimOperParen">, </span><span class="String">', .\1'</span><span class="vimOperParen">, </span><span class="String">'g'</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span>
<span class="vimContinue">		  \</span> <span class="vimVar">s:is_norm</span> ? <span class="String">'*, .'</span><span class="vimOper">..</span><span class="vimFuncVar">a:grpname</span><span class="vimOper">..</span>
<span class="vimContinue">		  \</span> <span class="vimVar">l:csssel</span> :
<span class="vimContinue">		  \</span> <span class="String">'.'</span><span class="vimOper">..</span><span class="vimFuncVar">a:grpname</span><span class="vimOper">..</span>
<span class="vimContinue">		  \</span> <span class="vimVar">l:csssel</span>
    <span class="vimCommand">endif</span>
    <span class="vimNotFunc">return</span> <span class="vimVar">l:csssel</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">HiGrpLn2CssRule</span><span class="vimParenSep">(</span><span class="vimOperParen">grpname, grplnr</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:grpname</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimParenSep">(</span><span class="vimFuncVar">a:grplnr</span><span class="vimOperParen"> </span><span class="vimOper">||</span><span class="vimOperParen"> s:is_norm</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">l:cssrule</span> <span class="vimOper">=</span> []
    <span class="vimLet">let</span> <span class="vimVar">l:comgrp</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:grpname</span>
    <span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:grplnr</span>
    <span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, l:fndlnr, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">while</span> <span class="vimParenSep">(</span><span class="vimFuncName">search</span><span class="vimParenSep">(</span><span class="String">'links to '</span><span class="vimOperParen">, </span><span class="String">'cnW'</span><span class="vimOperParen">, l:fndlnr</span><span class="vimParenSep">)</span><span class="vimOperParen"> </span><span class="vimOper">==</span><span class="vimOperParen"> l:fndlnr</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:n</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimFuncName">matchlist</span><span class="vimParenSep">(</span><span class="vimFuncName">getline</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fndlnr</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'\(links to \)\(\w\+\)'</span><span class="vimParenSep">))</span>[<span class="Number">2</span>]
      <span class="vimNotFunc">if</span> <span class="vimVar">l:comgrp</span> <span class="vimOper">==?</span> <span class="vimVar">l:n</span>
	<span class="vimLet">let</span> <span class="vimVar">l:pos</span> <span class="vimOper">=</span> <span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimFuncName">getline</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimParenSep">)</span><span class="vimOperParen">, </span><span class="String">'links to '</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, l:fndlnr, l:pos, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
	<span class="vimCommand">normal</span> d$
	<span class="vimCommand">break</span>
      <span class="vimCommand">endif</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:nfndlnr</span> <span class="vimOper">=</span> <span class="vimFuncName">search</span><span class="vimParenSep">(</span><span class="String">'^\&lt;'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen">l:n</span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'\&gt;'</span><span class="vimOperParen">, </span><span class="String">'cW'</span><span class="vimOperParen">, </span><span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">'$'</span><span class="vimParenSep">))</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimVar">l:nfndlnr</span>
	<span class="vimCommand">execute</span> <span class="vimVar">l:fndlnr</span>'<span class="vimVar">delete</span>'
	<span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
      <span class="vimCommand">endif</span>
      <span class="vimLet">let</span> <span class="vimVar">l:comgrp</span> <span class="vimOper">=</span> <span class="vimVar">l:n</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimVar">l:nfndlnr</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, l:fndlnr, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
    <span class="vimCommand">endwhile</span>
    <span class="vimLet">let</span> <span class="vimVar">l:csssel</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HiGrpNme2CssSel</span><span class="vimParenSep">(</span><span class="vimOperParen">l:comgrp</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:csssel</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:csssel</span><span class="vimParenSep">)</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimFuncName">search</span><span class="vimParenSep">(</span><span class="String">'^\&lt;'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen">l:comgrp</span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'\&gt;'</span><span class="vimOperParen">, </span><span class="String">'cW'</span><span class="vimOperParen">, </span><span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">'$'</span><span class="vimParenSep">))</span>
      <span class="vimLet">let</span> <span class="vimVar">l:hiattr</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">ParseHiArgs</span><span class="vimParenSep">(</span><span class="vimOperParen">l:fndlnr</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hiattr</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hiattr</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:cssdecl</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HiAttr2CssDecl</span><span class="vimParenSep">(</span><span class="vimOperParen">l:hiattr</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssdecl</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">insert</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssrule, l:csssel</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssrule</span> <span class="vimOper">+=</span> <span class="vimVar">l:cssdecl</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimCommand">call</span> <span class="vimFuncName">deletebufline</span><span class="vimParenSep">(</span><span class="vimOperParen">s:NME_TMP_BUF, l:fndlnr</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">return</span> <span class="vimVar">l:cssrule</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction">! colo2css#MainColo2Css</span><span class="vimParenSep">(</span><span class="vimOperParen">colofls, bgr, outdir, fnt</span><span class="vimParenSep">)</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:bgr</span><span class="vimParenSep">)</span>
    <span class="vimLet">let</span> <span class="vimVar">s:old_val</span> <span class="vimOper">=</span> <span class="Delimiter">{</span><span class="String">'&amp;bg'</span><span class="vimOperParen">:&amp;bg</span><span class="Delimiter">}</span>
    <span class="vimFuncName">execute</span><span class="vimParenSep">(</span><span class="String">'set background='</span><span class="vimOper">..</span><span class="vimFuncVar">a:bgr</span><span class="vimParenSep">)</span>
  <span class="vimCommand">endif</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:colofls</span><span class="vimOperParen">[</span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
    <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:fnt</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">&amp;guifont</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:fnt</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'X11'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">&amp;guifontset</span> <span class="vimOper">=</span> <span class="vimFuncVar">a:fnt</span>
      <span class="vimCommand">endif</span>
    <span class="vimCommand">endif</span>
    <span class="vimCommand">set</span> <span class="PreProc">lines</span>=999 <span class="PreProc">columns</span>=9999 <span class="PreProc">eventignore</span>=all
  <span class="vimCommand">endif</span>
  <span class="vimCommand">for</span> <span class="vimVar">l:clch</span> <span class="vimCommand">in</span> <span class="vimFuncVar">a:colofls</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:clch</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">has</span><span class="vimParenSep">(</span><span class="String">'gui'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">exe</span> <span class="String">&quot;normal \&lt;Esc&gt;</span><span class="String">&quot;</span>
	<span class="vimCommand">echoerr</span> <span class="String">&quot;Работа подключаемого модуля возможна только в графической оболочке (ГИП, GUI)</span><span class="String">&quot;</span>
	<span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
      <span class="vimCommand">endif</span>
      <span class="vimCommand">call</span> <span class="vimFuncName">extend</span><span class="vimParenSep">(</span><span class="vimOperParen">s:old_val, </span><span class="Delimiter">{</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;hidden'</span><span class="vimOperParen">:&amp;hidden,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;lazyredraw'</span><span class="vimOperParen">:&amp;lazyredraw,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;more'</span><span class="vimOperParen">:&amp;more,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;report'</span><span class="vimOperParen">:&amp;report,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;shortmess'</span><span class="vimOperParen">:&amp;shortmess,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;wrapscan'</span><span class="vimOperParen">:&amp;wrapscan,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;showcmd'</span><span class="vimOperParen">:&amp;showcmd,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;ruler'</span><span class="vimOperParen">:&amp;ruler,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;spell'</span><span class="vimOperParen">:&amp;spell,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;whichwrap'</span><span class="vimOperParen">:&amp;whichwrap,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;textwidth'</span><span class="vimOperParen">:&amp;textwidth,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'&amp;verbose'</span><span class="vimOperParen">:&amp;verbose,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@e'</span><span class="vimOperParen">:@e,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@u'</span><span class="vimOperParen">:@u,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@i'</span><span class="vimOperParen">:@i,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@x'</span><span class="vimOperParen">:@x,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@f'</span><span class="vimOperParen">:@f,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@b'</span><span class="vimOperParen">:@b,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="String">'@/'</span><span class="vimOperParen">:@/,</span>
<span class="vimContinue">	    \</span><span class="vimOperParen"> </span><span class="Delimiter">}</span><span class="vimParenSep">)</span>
      <span class="vimNotFunc">if</span> <span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">&quot;$</span><span class="String">&quot;</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="Number">1</span> <span class="vimOper">||</span> <span class="vimFuncName">getline</span><span class="vimParenSep">(</span><span class="Number">1</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="String">&quot;</span><span class="String">&quot;</span>
	<span class="vimCommand">new</span>
      <span class="vimCommand">endif</span>
      <span class="vimCommand">augroup</span> <span class="vimIsCommand">colo2css</span>
	<span class="vimCommand">autocmd</span> <span class="vimAutoEvent">BufWipeout</span> Tmp_Colo2CSS <span class="vimCommand">call</span><span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">CleanUp</span><span class="vimParenSep">(</span><span class="vimOperParen">s:old_val</span><span class="vimParenSep">)</span>
<span class="vimContinue">	      \</span> | <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">CleanUp</span>
      <span class="vimCommand">augroup</span> <span class="vimIsCommand">END</span>
    <span class="vimNotFunc">else</span>
      <span class="vimCommand">highlight</span> <span class="vimCommand">clear</span> <span class="vimIsCommand">Normal</span>
      <span class="vimCommand">highlight</span> <span class="vimCommand">clear</span>
      <span class="vimCommand">syntax</span> <span class="vimSynType">reset</span>
      <span class="vimCommand">syntax</span> <span class="vimSynType">clear</span>
      <span class="vimFuncName">execute</span><span class="vimParenSep">(</span><span class="String">'silent colorscheme '</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> l:clch</span><span class="vimParenSep">)</span>
    <span class="vimCommand">endif</span>
    <span class="vimCommand">call</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HiGroups2Buf</span><span class="vimParenSep">()</span>
    <span class="vimNotFunc">if</span> <span class="vimFuncName">bufexists</span><span class="vimParenSep">(</span><span class="vimOperParen">s:NME_TMP_BUF</span><span class="vimParenSep">)</span>
      <span class="vimLet">let</span> <span class="vimVar">l:cssentries</span> <span class="vimOper">=</span> []
      <span class="vimLet">let</span> <span class="vimVar">s:is_norm</span> <span class="vimOper">=</span> <span class="Number">1</span>
      <span class="vimCommand">for</span> <span class="vimVar">l:grpname</span> <span class="vimCommand">in</span> <span class="vimVar">s:INIT_GRP</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">setpos</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimOperParen">, [</span><span class="Number">0</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">]</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimFuncName">search</span><span class="vimParenSep">(</span><span class="String">'^\&lt;'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen">l:grpname</span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'\&gt;'</span><span class="vimOperParen">, </span><span class="String">'cW'</span><span class="vimOperParen">, </span><span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">'$'</span><span class="vimParenSep">))</span>
	<span class="vimNotFunc">if</span> <span class="vimParenSep">(</span><span class="vimOper">!</span><span class="vimOperParen">l:fndlnr </span><span class="vimOper">&amp;&amp;</span><span class="vimOperParen"> s:is_norm</span><span class="vimParenSep">)</span> <span class="vimOper">||</span> <span class="vimVar">l:fndlnr</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssrule</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HiGrpLn2CssRule</span><span class="vimParenSep">(</span><span class="vimOperParen">l:grpname, l:fndlnr</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssrule</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssrule</span><span class="vimParenSep">)</span>
	    <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssentries, l:cssrule</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">endif</span>
	<span class="vimCommand">endif</span>
	<span class="vimLet">let</span> <span class="vimVar">s:is_norm</span> <span class="vimOper">=</span> <span class="Number">0</span>
      <span class="vimCommand">endfor</span>
      <span class="vimNotFunc">while</span> <span class="vimFuncName">getline</span><span class="vimParenSep">(</span><span class="Number">1</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="String">&quot;</span><span class="String">&quot;</span>
	<span class="vimLet">let</span> <span class="vimVar">l:fndlnr</span> <span class="vimOper">=</span> <span class="vimFuncName">line</span><span class="vimParenSep">(</span><span class="String">'.'</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:grpname</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">GetEntry</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimOperParen">, l:fndlnr, </span><span class="Number">1</span><span class="vimOperParen">, </span><span class="Number">0</span><span class="vimOperParen">, </span><span class="String">'iw'</span><span class="vimParenSep">)</span>
	<span class="vimNotFunc">if</span> <span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:grpname</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">execute</span> <span class="vimVar">l:fndlnr</span>'<span class="vimVar">delete</span>'
	  <span class="vimCommand">continue</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:cssrule</span> <span class="vimOper">=</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="Normal">HiGrpLn2CssRule</span><span class="vimParenSep">(</span><span class="vimOperParen">l:grpname, l:fndlnr</span><span class="vimParenSep">)</span>
	  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssrule</span><span class="vimParenSep">)</span> <span class="vimOper">&amp;&amp;</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="Number">0</span><span class="vimParenSep">)</span> <span class="vimOper">!=</span> <span class="vimFuncName">type</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssrule</span><span class="vimParenSep">)</span>
	    <span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssentries, l:cssrule</span><span class="vimParenSep">)</span>
	  <span class="vimCommand">endif</span>
	<span class="vimCommand">endif</span>
      <span class="vimCommand">endwhile</span>
      <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssentries</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:css_head</span> <span class="vimOper">=</span> []
	<span class="vimNotFunc">if</span> <span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:clch</span><span class="vimParenSep">)</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:coloschm</span> <span class="vimOper">=</span> <span class="vimParenSep">(</span><span class="vimFuncName">trim</span><span class="vimParenSep">(</span><span class="vimFuncName">execute</span><span class="vimParenSep">(</span><span class="String">'colorscheme'</span><span class="vimParenSep">)))</span>
	  <span class="vimNotFunc">if</span> <span class="Number">0</span><span class="vimOper">&lt;=</span><span class="vimSynType">match</span><span class="vimParenSep">(</span><span class="vimOperParen">l:coloschm, </span><span class="String">'\cE121:'</span><span class="vimParenSep">)</span>
	    <span class="vimLet">let</span> <span class="vimVar">l:coloschm</span> <span class="vimOper">=</span> <span class="String">'unknown'</span>
	  <span class="vimCommand">endif</span>
	<span class="vimNotFunc">else</span>
	  <span class="vimLet">let</span> <span class="vimVar">l:coloschm</span> <span class="vimOper">=</span> <span class="vimVar">l:clch</span>
	<span class="vimCommand">endif</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:css_head,</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="String">'/* Этот файл CSS создан в программе Vim версии '</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> v:version/</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'.'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> v:version%</span><span class="Number">100</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'.'</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> v:versionlong % </span><span class="vimFuncName">float2nr</span><span class="vimParenSep">(</span><span class="vimFuncName">pow</span><span class="vimParenSep">(</span><span class="Number">10</span><span class="vimOperParen">, </span><span class="vimParenSep">(</span><span class="vimFuncName">len</span><span class="vimParenSep">(</span><span class="vimOperParen">v:versionlong</span><span class="vimParenSep">)</span><span class="vimOper">-</span><span class="Normal">len</span><span class="vimParenSep">(</span><span class="vimOperParen">v:version</span><span class="vimParenSep">))))</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">' */'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:css_head,</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="String">'/* из файла цветовой схемы «'</span><span class="vimOperParen"> </span><span class="vimOper">..</span><span class="vimOperParen"> l:coloschm </span><span class="vimOper">..</span><span class="vimOperParen"> </span><span class="String">'» */'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:css_head,</span>
<span class="vimContinue">	  \</span><span class="vimOperParen"> </span><span class="String">'/* Для этого был использован подключаемый модуль «colo2css.vim» */'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">add</span><span class="vimParenSep">(</span><span class="vimOperParen">l:css_head, </span><span class="String">' '</span><span class="vimParenSep">)</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">chdir</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:outdir</span><span class="vimParenSep">)</span>
	<span class="vimLet">let</span> <span class="vimVar">l:flnm</span> <span class="vimOper">=</span> <span class="vimVar">l:coloschm</span> <span class="vimOper">..</span> <span class="String">'_'</span> <span class="vimOper">..</span> &amp;<span class="vimIsCommand">background</span> <span class="vimOper">..</span> <span class="String">'.css'</span>
	<span class="vimCommand">call</span> <span class="vimFuncName">writefile</span><span class="vimParenSep">(</span><span class="vimFuncName">map</span><span class="vimParenSep">(</span><span class="vimOperParen">l:css_head, </span><span class="String">'v:val .. &quot;\r&quot;'</span><span class="vimParenSep">)</span><span class="vimOperParen">, l:flnm</span><span class="vimParenSep">)</span>
	<span class="vimCommand">for</span> <span class="vimVar">l:cssln</span> <span class="vimCommand">in</span> <span class="vimVar">l:cssentries</span>
	  <span class="vimCommand">call</span> <span class="vimFuncName">writefile</span><span class="vimParenSep">(</span><span class="vimFuncName">map</span><span class="vimParenSep">(</span><span class="vimOperParen">l:cssln, </span><span class="String">'v:val .. &quot;\r&quot;'</span><span class="vimParenSep">)</span><span class="vimOperParen">, l:flnm, </span><span class="String">'a'</span><span class="vimParenSep">)</span>
	<span class="vimCommand">endfor</span>
      <span class="vimCommand">endif</span>
      <span class="vimCommand">execute</span> <span class="String">'bwipeout! '</span> <span class="vimVar">s:NME_TMP_BUF</span>
      <span class="vimCommand">redraw</span><span class="vimOper">!</span>
    <span class="vimNotFunc">else</span>
      <span class="vimNotFunc">return</span> <span class="vimOper">-</span>1
    <span class="vimCommand">endif</span>
  <span class="vimCommand">endfor</span>
  <span class="vimNotFunc">if</span> <span class="vimOper">!</span><span class="vimFuncName">empty</span><span class="vimParenSep">(</span><span class="vimOperParen">l:clch</span><span class="vimParenSep">)</span>
    <span class="Number">0</span>cquit<span class="vimOper">!</span>
  <span class="vimCommand">endif</span>
<span class="vimCommand">endfunction</span>

<span class="vimFuncKey">function</span><span class="vimFunction"> </span><span class="Special">&lt;SID&gt;</span><span class="vimFunction">CleanUp</span><span class="vimParenSep">(</span><span class="vimOperParen">oldval</span><span class="vimParenSep">)</span>
  <span class="vimCommand">for</span> [<span class="vimVar">l:key</span>, <span class="vimVar">l:val</span>] <span class="vimCommand">in</span> <span class="vimFuncName">items</span><span class="vimParenSep">(</span><span class="vimFuncVar">a:oldval</span><span class="vimParenSep">)</span>
    <span class="vimCommand">exe</span> <span class="String">'let '</span> <span class="vimOper">..</span> <span class="vimVar">l:key</span> <span class="vimOper">..</span> <span class="String">' = '</span> <span class="vimOper">..</span> <span class="String">'&quot;'</span> <span class="vimOper">..</span> <span class="vimVar">l:val</span> <span class="vimOper">..</span> <span class="String">'&quot;'</span>
  <span class="vimCommand">endfor</span>
  <span class="vimLet">unlet</span><span class="vimOper">!</span> <span class="vimVar">s:NOT_RGB</span> <span class="vimVar">s:WINSYS_COLO</span> <span class="vimVar">s:FNT_SIZE</span> <span class="vimVar">s:SPEC_ATTR</span> <span class="vimVar">s:HI_ARGS</span> <span class="vimVar">s:INIT_GRP</span>
  <span class="vimLet">unlet</span><span class="vimOper">!</span> <span class="vimVar">s:NME_TMP_BUF</span> <span class="vimVar">s:is_norm</span> <span class="vimVar">s:bg_norm</span> <span class="vimVar">s:fg_norm</span> <span class="vimVar">s:old_val</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">HiGroups2Buf</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">GetEntry</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">GetLnkGrp</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">Dec2Hex</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">ColoStr2ColoNum</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">GetColor</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">ParseFont</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">ParseHiArgs</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">HiAttr2CssDecl</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">HiGrpNme2CssSel</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">HiGrpLn2CssRule</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">RGB2HSB</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">HSB2RGB</span>
  <span class="vimCommand">delfunction</span> <span class="vimBracket">&lt;</span><span class="vimNotation">SID</span><span class="vimBracket">&gt;</span><span class="vimIsCommand">BrightColo</span>
  <span class="vimCommand">au</span>! colo2css
<span class="vimCommand">endfunction</span>

<span class="vimLet">let</span> <span class="vimVar">&amp;cpo</span> <span class="vimOper">=</span> <span class="vimVar">s:old_set</span>
<span class="vimLet">unlet</span> <span class="vimVar">s:old_set</span>


<span class="Comment">&quot; This Source Code Form is subject to the terms of the Mozilla</span>
<span class="Comment">&quot; Public License, v. 2.0. If a copy of the MPL was not distributed</span>
<span class="Comment">&quot; with this file, You can obtain one at <a href="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</a></span>
<span class="Comment">&quot; The Original Code is file colo2css.vim, <a href="https://github.com/RestorerZ/Colo2CSS">https://github.com/RestorerZ/Colo2CSS</a></span>
<span class="Comment">&quot; The Initial Developer of the Original Code is Pavel Vitalievich Z. (also Restorer)</span>
<span class="Comment">&quot; All Rights Reserved.</span>
</pre>
</body>
</html>
<!-- vim: set foldmethod=manual : -->
