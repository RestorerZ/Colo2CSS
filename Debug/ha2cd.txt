


вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Язык ввода в активном буфере <RUS>'



-1
Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('E:/Programs/Vim/vim82/doc/options.txt')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(E:\Programs\Vim\vim82\doc)
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('D:/Project/vim/my_plugins/colo2css/HiAttr2CssDecl.vim')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(D:\Project\vim\my_plugins\colo2css)
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('E:/Programs/Vim/vim82/doc/options.txt')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(E:\Programs\Vim\vim82\doc)
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('D:/Project/vim/my_plugins/colo2css/HiAttr2CssDecl.vim')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(D:\Project\vim\my_plugins\colo2css)
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Язык ввода в активном буфере <RUS>'


E471: Требуется указать аргумент команды
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Язык ввода в активном буфере <RUS>'

вызов GetVimIndent()

строка 1, команда   let ignorecase_save = &ignorecase
строка 2, команда   try
строка 3, команда     let &ignorecase = 0
строка 4, команда     return GetVimIndentIntern()
вызов GetVimIndentIntern()

строка 1, команда   " Find a non-blank line above the current line.
строка 2, команда   let lnum = prevnonblank(v:lnum - 1)
строка 3, команда 
строка 4, команда   " The previous line, ignoring line continuation
строка 5, команда   let prev_text_end = lnum > 0 ? getline(lnum) : ''
строка 6, команда 
строка 7, команда   " If the current line doesn't start with '\' or '"\ ' and below a line that
строка 8, команда   " starts with '\' or '"\ ', use the indent of the line above it.
строка 9, команда   let cur_text = getline(v:lnum)
строка 10, команда   if cur_text !~ s:lineContPat
строка 11, команда     while lnum > 0 && getline(lnum) =~ s:lineContPat
строка 12, команда       let lnum = lnum - 1
строка 13, команда     endwhile
строка 14, команда   endif
строка 15, команда 
строка 16, команда   " At the start of the file use zero indent.
строка 17, команда   if lnum == 0
строка 18, команда     return 0
строка 19, команда   endif
строка 20, команда 
строка 21, команда   " the start of the previous line, skipping over line continuation
строка 22, команда   let prev_text = getline(lnum)
строка 23, команда   let found_cont = 0
строка 24, команда 
строка 25, команда   " Add a 'shiftwidth' after :if, :while, :try, :catch, :finally, :function
строка 26, команда   " and :else.  Add it three times for a line that starts with '\' or '"\ '
строка 27, команда   " after a line that doesn't (or g:vim_indent_cont if it exists).
строка 28, команда   let ind = indent(lnum)
строка 29, команда 
строка 30, команда   " In heredoc indenting works completely differently.
строка 31, команда   if has('syntax_items') 
строка 32, команда     let syn_here = synIDattr(synID(v:lnum, 1, 1), "name")
строка 33, команда     if syn_here =~ 'vimLetHereDocStop'
строка 34, команда       " End of heredoc: use indent of matching start line
строка 35, команда       let lnum = v:lnum - 1
строка 36, команда       while lnum > 0
строка 37, команда ^Ilet attr = synIDattr(synID(lnum, 1, 1), "name")
строка 38, команда ^Iif attr != '' && attr !~ 'vimLetHereDoc'
строка 39, команда ^I  return indent(lnum)
строка 40, команда ^Iendif
строка 41, команда ^Ilet lnum -= 1
строка 42, команда       endwhile
строка 43, команда       return 0
строка 44, команда     endif
строка 45, команда     if syn_here =~ 'vimLetHereDoc'
строка 46, команда       if synIDattr(synID(lnum, 1, 1), "name") !~ 'vimLetHereDoc'
строка 47, команда ^I" First line in heredoc: increase indent
строка 48, команда ^Ireturn ind + shiftwidth()
строка 49, команда       endif
строка 50, команда       " Heredoc continues: no change in indent
строка 51, команда       return ind
строка 52, команда     endif
строка 53, команда   endif
строка 54, команда 
строка 55, команда   if cur_text =~ s:lineContPat && v:lnum > 1 && prev_text !~ s:lineContPat
строка 56, команда     let found_cont = 1
строка 57, команда     if exists("g:vim_indent_cont")
строка 58, команда       let ind = ind + g:vim_indent_cont
строка 59, команда     else
строка 60, команда       let ind = ind + shiftwidth() * 3
строка 61, команда     endif
строка 62, команда   elseif prev_text =~ '^\s*aug\%[roup]\s\+' && prev_text !~ '^\s*aug\%[roup]\s\+[eE][nN][dD]\>'
строка 63, команда     let ind = ind + shiftwidth()
строка 64, команда   else
строка 65, команда     " A line starting with :au does not increment/decrement indent.
строка 66, команда     " A { may start a block or a dict.  Assume that when a } follows it's a
строка 67, команда     " terminated dict.
строка 68, команда     if prev_text !~ '^\s*au\%[tocmd]' && prev_text !~ '^\s*{.*}'
строка 69, команда       let i = match(prev_text, '\(^\||\)\s*\(export\s\+\)\?\({\|\(if\|wh\%[ile]\|for\|try\|cat\%[ch]\|fina\|finall\%[y]\|fu\%[nction]\|def\|el\%[seif]\)\>\)')
строка 70, команда       if i >= 0
строка 71, команда ^Ilet ind += shiftwidth()
строка 72, команда ^Iif strpart(prev_text, i, 1) == '|' && has('syntax_items') && synIDattr(synID(lnum, i, 1), "name") =~ '\(Comment\|String\)$'
строка 74, команда ^I  let ind -= shiftwidth()
строка 75, команда ^Iendif
строка 76, команда       endif
строка 77, команда     endif
строка 78, команда   endif
строка 79, команда 
строка 80, команда   " If the previous line contains an "end" after a pipe, but not in an ":au"
строка 81, команда   " command.  And not when there is a backslash before the pipe.
строка 82, команда   " And when syntax HL is enabled avoid a match inside a string.
строка 83, команда   let i = match(prev_text, '[^\\]|\s*\(ene\@!\)')
строка 84, команда   if i > 0 && prev_text !~ '^\s*au\%[tocmd]'
строка 85, команда     if !has('syntax_items') || synIDattr(synID(lnum, i + 2, 1), "name") !~ '\(Comment\|String\)$'
строка 86, команда       let ind = ind - shiftwidth()
строка 87, команда     endif
строка 88, команда   endif
строка 89, команда 
строка 90, команда   " For a line starting with "}" find the matching "{".  If it is at the start
строка 91, команда   " of the line align with it, probably end of a block.
строка 92, команда   " Use the mapped "%" from matchit to find the match, otherwise we may match
строка 93, команда   " a { inside a comment or string.
строка 94, команда   if cur_text =~ '^\s*}'
строка 95, команда     if maparg('%') != ''
строка 96, команда       exe v:lnum
строка 97, команда       silent! normal %
строка 98, команда       if line('.') < v:lnum && getline('.') =~ '^\s*{'
строка 99, команда ^Ilet ind = indent('.')
строка 100, команда       endif
строка 101, команда     else
строка 102, команда       " todo: use searchpair() to find a match
строка 103, команда     endif
строка 104, команда   endif
строка 105, команда 
строка 106, команда   " Below a line starting with "}" find the matching "{".  If it is at the
строка 107, команда   " end of the line we must be below the end of a dictionary.
строка 108, команда   if prev_text =~ '^\s*}'
строка 109, команда     if maparg('%') != ''
строка 110, команда       exe lnum
строка 111, команда       silent! normal %
строка 112, команда       if line('.') == lnum || getline('.') !~ '^\s*{'
строка 113, команда ^Ilet ind = ind - shiftwidth()
строка 114, команда       endif
строка 115, команда     else
строка 116, команда       " todo: use searchpair() to find a match
строка 117, команда     endif
строка 118, команда   endif
строка 119, команда 
строка 120, команда   " Below a line starting with "]" we must be below the end of a list.
строка 121, команда   " Include a "}" and "},} in case a dictionary ends too.
строка 122, команда   if prev_text_end =~ '^\s*\(},\=\s*\)\=]'
строка 123, команда     let ind = ind - shiftwidth()
строка 124, команда   endif
строка 125, команда 
строка 126, команда   let ends_in_comment = has('syntax_items') && synIDattr(synID(lnum, len(getline(lnum)), 1), "name") =~ '\(Comment\|String\)$'
строка 128, команда 
строка 129, команда   " A line ending in "{" or "[" is most likely the start of a dict/list literal,
строка 130, команда   " indent the next line more.  Not for a continuation line or {{{.
строка 131, команда   if !ends_in_comment && prev_text_end =~ '\s[{[]\s*$' && !found_cont
строка 132, команда     let ind = ind + shiftwidth()
строка 133, команда   endif
строка 134, команда 
строка 135, команда   " Subtract a 'shiftwidth' on a :endif, :endwhile, :catch, :finally, :endtry,
строка 136, команда   " :endfun, :enddef, :else and :augroup END.
строка 137, команда   if cur_text =~ '^\s*\(ene\@!\|cat\|finall\|el\|aug\%[roup]\s\+[eE][nN][dD]\)'
строка 138, команда     let ind = ind - shiftwidth()
строка 139, команда   endif
строка 140, команда 
строка 141, команда   return ind
GetVimIndentIntern вернула #0

Начинается обработка GetVimIndent

:return 0 приостановлено

строка 5, команда   finally
строка 6, команда     let &ignorecase = ignorecase_save
строка 7, команда   endtry
:return 0 возобновлено

GetVimIndent вернула #0
-- РЕЖИМ ВСТАВКИ (RUS) --
Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"
-- РЕЖИМ ВСТАВКИ --
Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

вызов GetVimIndent()

строка 1, команда   let ignorecase_save = &ignorecase
строка 2, команда   try
строка 3, команда     let &ignorecase = 0
строка 4, команда     return GetVimIndentIntern()
вызов GetVimIndentIntern()

строка 1, команда   " Find a non-blank line above the current line.
строка 2, команда   let lnum = prevnonblank(v:lnum - 1)
строка 3, команда 
строка 4, команда   " The previous line, ignoring line continuation
строка 5, команда   let prev_text_end = lnum > 0 ? getline(lnum) : ''
строка 6, команда 
строка 7, команда   " If the current line doesn't start with '\' or '"\ ' and below a line that
строка 8, команда   " starts with '\' or '"\ ', use the indent of the line above it.
строка 9, команда   let cur_text = getline(v:lnum)
строка 10, команда   if cur_text !~ s:lineContPat
строка 11, команда     while lnum > 0 && getline(lnum) =~ s:lineContPat
строка 12, команда       let lnum = lnum - 1
строка 13, команда     endwhile
строка 14, команда   endif
строка 15, команда 
строка 16, команда   " At the start of the file use zero indent.
строка 17, команда   if lnum == 0
строка 18, команда     return 0
строка 19, команда   endif
строка 20, команда 
строка 21, команда   " the start of the previous line, skipping over line continuation
строка 22, команда   let prev_text = getline(lnum)
строка 23, команда   let found_cont = 0
строка 24, команда 
строка 25, команда   " Add a 'shiftwidth' after :if, :while, :try, :catch, :finally, :function
строка 26, команда   " and :else.  Add it three times for a line that starts with '\' or '"\ '
строка 27, команда   " after a line that doesn't (or g:vim_indent_cont if it exists).
строка 28, команда   let ind = indent(lnum)
строка 29, команда 
строка 30, команда   " In heredoc indenting works completely differently.
строка 31, команда   if has('syntax_items') 
строка 32, команда     let syn_here = synIDattr(synID(v:lnum, 1, 1), "name")
строка 33, команда     if syn_here =~ 'vimLetHereDocStop'
строка 34, команда       " End of heredoc: use indent of matching start line
строка 35, команда       let lnum = v:lnum - 1
строка 36, команда       while lnum > 0
строка 37, команда ^Ilet attr = synIDattr(synID(lnum, 1, 1), "name")
строка 38, команда ^Iif attr != '' && attr !~ 'vimLetHereDoc'
строка 39, команда ^I  return indent(lnum)
строка 40, команда ^Iendif
строка 41, команда ^Ilet lnum -= 1
строка 42, команда       endwhile
строка 43, команда       return 0
строка 44, команда     endif
строка 45, команда     if syn_here =~ 'vimLetHereDoc'
строка 46, команда       if synIDattr(synID(lnum, 1, 1), "name") !~ 'vimLetHereDoc'
строка 47, команда ^I" First line in heredoc: increase indent
строка 48, команда ^Ireturn ind + shiftwidth()
строка 49, команда       endif
строка 50, команда       " Heredoc continues: no change in indent
строка 51, команда       return ind
строка 52, команда     endif
строка 53, команда   endif
строка 54, команда 
строка 55, команда   if cur_text =~ s:lineContPat && v:lnum > 1 && prev_text !~ s:lineContPat
строка 56, команда     let found_cont = 1
строка 57, команда     if exists("g:vim_indent_cont")
строка 58, команда       let ind = ind + g:vim_indent_cont
строка 59, команда     else
строка 60, команда       let ind = ind + shiftwidth() * 3
строка 61, команда     endif
строка 62, команда   elseif prev_text =~ '^\s*aug\%[roup]\s\+' && prev_text !~ '^\s*aug\%[roup]\s\+[eE][nN][dD]\>'
строка 63, команда     let ind = ind + shiftwidth()
строка 64, команда   else
строка 65, команда     " A line starting with :au does not increment/decrement indent.
строка 66, команда     " A { may start a block or a dict.  Assume that when a } follows it's a
строка 67, команда     " terminated dict.
строка 68, команда     if prev_text !~ '^\s*au\%[tocmd]' && prev_text !~ '^\s*{.*}'
строка 69, команда       let i = match(prev_text, '\(^\||\)\s*\(export\s\+\)\?\({\|\(if\|wh\%[ile]\|for\|try\|cat\%[ch]\|fina\|finall\%[y]\|fu\%[nction]\|def\|el\%[seif]\)\>\)')
строка 70, команда       if i >= 0
строка 71, команда ^Ilet ind += shiftwidth()
строка 72, команда ^Iif strpart(prev_text, i, 1) == '|' && has('syntax_items') && synIDattr(synID(lnum, i, 1), "name") =~ '\(Comment\|String\)$'
строка 74, команда ^I  let ind -= shiftwidth()
строка 75, команда ^Iendif
строка 76, команда       endif
строка 77, команда     endif
строка 78, команда   endif
строка 79, команда 
строка 80, команда   " If the previous line contains an "end" after a pipe, but not in an ":au"
строка 81, команда   " command.  And not when there is a backslash before the pipe.
строка 82, команда   " And when syntax HL is enabled avoid a match inside a string.
строка 83, команда   let i = match(prev_text, '[^\\]|\s*\(ene\@!\)')
строка 84, команда   if i > 0 && prev_text !~ '^\s*au\%[tocmd]'
строка 85, команда     if !has('syntax_items') || synIDattr(synID(lnum, i + 2, 1), "name") !~ '\(Comment\|String\)$'
строка 86, команда       let ind = ind - shiftwidth()
строка 87, команда     endif
строка 88, команда   endif
строка 89, команда 
строка 90, команда   " For a line starting with "}" find the matching "{".  If it is at the start
строка 91, команда   " of the line align with it, probably end of a block.
строка 92, команда   " Use the mapped "%" from matchit to find the match, otherwise we may match
строка 93, команда   " a { inside a comment or string.
строка 94, команда   if cur_text =~ '^\s*}'
строка 95, команда     if maparg('%') != ''
строка 96, команда       exe v:lnum
строка 97, команда       silent! normal %
строка 98, команда       if line('.') < v:lnum && getline('.') =~ '^\s*{'
строка 99, команда ^Ilet ind = indent('.')
строка 100, команда       endif
строка 101, команда     else
строка 102, команда       " todo: use searchpair() to find a match
строка 103, команда     endif
строка 104, команда   endif
строка 105, команда 
строка 106, команда   " Below a line starting with "}" find the matching "{".  If it is at the
строка 107, команда   " end of the line we must be below the end of a dictionary.
строка 108, команда   if prev_text =~ '^\s*}'
строка 109, команда     if maparg('%') != ''
строка 110, команда       exe lnum
строка 111, команда       silent! normal %
строка 112, команда       if line('.') == lnum || getline('.') !~ '^\s*{'
строка 113, команда ^Ilet ind = ind - shiftwidth()
строка 114, команда       endif
строка 115, команда     else
строка 116, команда       " todo: use searchpair() to find a match
строка 117, команда     endif
строка 118, команда   endif
строка 119, команда 
строка 120, команда   " Below a line starting with "]" we must be below the end of a list.
строка 121, команда   " Include a "}" and "},} in case a dictionary ends too.
строка 122, команда   if prev_text_end =~ '^\s*\(},\=\s*\)\=]'
строка 123, команда     let ind = ind - shiftwidth()
строка 124, команда   endif
строка 125, команда 
строка 126, команда   let ends_in_comment = has('syntax_items') && synIDattr(synID(lnum, len(getline(lnum)), 1), "name") =~ '\(Comment\|String\)$'
строка 128, команда 
строка 129, команда   " A line ending in "{" or "[" is most likely the start of a dict/list literal,
строка 130, команда   " indent the next line more.  Not for a continuation line or {{{.
строка 131, команда   if !ends_in_comment && prev_text_end =~ '\s[{[]\s*$' && !found_cont
строка 132, команда     let ind = ind + shiftwidth()
строка 133, команда   endif
строка 134, команда 
строка 135, команда   " Subtract a 'shiftwidth' on a :endif, :endwhile, :catch, :finally, :endtry,
строка 136, команда   " :endfun, :enddef, :else and :augroup END.
строка 137, команда   if cur_text =~ '^\s*\(ene\@!\|cat\|finall\|el\|aug\%[roup]\s\+[eE][nN][dD]\)'
строка 138, команда     let ind = ind - shiftwidth()
строка 139, команда   endif
строка 140, команда 
строка 141, команда   return ind
GetVimIndentIntern вернула #0

Начинается обработка GetVimIndent

:return 0 приостановлено

строка 5, команда   finally
строка 6, команда     let &ignorecase = ignorecase_save
строка 7, команда   endtry
:return 0 возобновлено

GetVimIndent вернула #0

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события MenuPopup автокоманды "*"
автокоманда call <SID>SpellPopup()

Выполнение call <SID>SpellPopup()
вызов <SNR>5_SpellPopup()

строка 1, команда     if exists("s:changeitem") && s:changeitem != ''
строка 2, команда       call <SID>SpellDel()
строка 3, команда     endif
строка 4, команда 
строка 5, команда     " Return quickly if spell checking is not enabled.
строка 6, команда     if !&spell || &spelllang == ''
строка 7, команда       return
<SNR>5_SpellPopup вернула #0

Начинается обработка для события MenuPopup автокоманды "*"

62 строки добавлено
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

62 строки добавлено
"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 360L, 12944B записано
"HiAttr2CssDecl.vim" 360L, 12944B записано
62 строки убрано; изменение № 2  8 секунд назад
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

62 строки убрано; изменение № 2  8 секунд назад
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"


вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iif s:fg_norm && s:bg_norm
строка 220, команда ^I    let @i = ''
строка 221, команда ^I    let @f = ''
строка 222, команда ^I    let @x = ''
строка 223, команда ^I    let @b = ''
строка 224, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 225, команда ^I    if 0 <= l:idx
строка 226, команда ^I^Ilet @i = l:idx
строка 227, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 228, команда ^I    endif
строка 229, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 230, команда ^I    if 0 <= l:idx
строка 231, команда ^I^Ilet @x = l:idx
строка 232, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 233, команда ^I    endif
строка 234, команда ^I    if @f && @b
строка 235, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 236, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 237, команда ^I    elseif @f && !@b
строка 238, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 239, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 240, команда ^I    elseif !@f && @b
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 242, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 243, команда ^I    elseif !@f && !@b
строка 244, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 245, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 246, команда ^I    endif
строка 247, команда ^Ielse
строка 248, команда ^I    return -1
HiAttr2CssDecl вернула #-1


вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iif s:fg_norm && s:bg_norm
строка 220, команда ^I    let @i = ''
строка 221, команда ^I    let @f = ''
строка 222, команда ^I    let @x = ''
строка 223, команда ^I    let @b = ''
строка 224, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 225, команда ^I    if 0 <= l:idx
строка 226, команда ^I^Ilet @i = l:idx
строка 227, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 228, команда ^I    endif
строка 229, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 230, команда ^I    if 0 <= l:idx
строка 231, команда ^I^Ilet @x = l:idx
строка 232, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 233, команда ^I    endif
строка 234, команда ^I    if @f && @b
строка 235, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 236, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 237, команда ^I    elseif @f && !@b
строка 238, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 239, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 240, команда ^I    elseif !@f && @b
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 242, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 243, команда ^I    elseif !@f && !@b
строка 244, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 245, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 246, команда ^I    endif
строка 247, команда ^Ielse
строка 248, команда ^I    return -1
HiAttr2CssDecl вернула #-1

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"


Поиск "doc/tags doc/tags-??" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\doc/tags"
Поиск "D:\Users\Iam/vimfiles\doc/tags-??"
Поиск "E:\Programs\Vim/vimfiles\doc/tags"
Поиск "E:\Programs\Vim/vimfiles\doc/tags-??"
Поиск "E:\Programs\Vim\vim82\doc/tags"
Поиск "E:\Programs\Vim\vim82\doc/tags-??"
Поиск "E:\Programs\Vim/vimfiles/after\doc/tags"
Поиск "E:\Programs\Vim/vimfiles/after\doc/tags-??"
Поиск "D:\Users\Iam/vimfiles/after\doc/tags"
Поиск "D:\Users\Iam/vimfiles/after\doc/tags-??"
Поиск в файле индексов E:\Programs\Vim\vimfiles\doc\tags
Поиск в файле индексов E:\Programs\Vim\vim82\doc\tags
Поиск в файле индексов E:\Programs\Vim\vim82\doc\tags-ru
Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('E:/Programs/Vim/vim82/doc/options.txt')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(E:\Programs\Vim\vim82\doc)
Поиск "doc/tags doc/tags-??" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\doc/tags"
Поиск "D:\Users\Iam/vimfiles\doc/tags-??"
Поиск "E:\Programs\Vim/vimfiles\doc/tags"
Поиск "E:\Programs\Vim/vimfiles\doc/tags-??"
Поиск "E:\Programs\Vim\vim82\doc/tags"
Поиск "E:\Programs\Vim\vim82\doc/tags-??"
Поиск "E:\Programs\Vim/vimfiles/after\doc/tags"
Поиск "E:\Programs\Vim/vimfiles/after\doc/tags-??"
Поиск "D:\Users\Iam/vimfiles/after\doc/tags"
Поиск "D:\Users\Iam/vimfiles/after\doc/tags-??"
Поиск в файле индексов E:\Programs\Vim\vimfiles\doc\tags
Поиск в файле индексов E:\Programs\Vim\vim82\doc\tags
Выполнение для события BufAdd автокоманды "*"
автокоманда call <SID>BMAdd()

Выполнение call <SID>BMAdd()
вызов <SNR>5_BMAdd()

строка 1, команда   if s:bmenu_wait == 0
строка 2, команда     " when adding too many buffers, redraw in short format
строка 3, команда     if s:bmenu_count == &menuitems && s:bmenu_short == 0
строка 4, команда       call s:BMShow()
строка 5, команда     else
строка 6, команда       let name = expand("<afile>")
строка 7, команда       let num = expand("<abuf>") + 0 " add zero to convert to a number type
строка 8, команда       if s:BMCanAdd(name, num)
вызов <SNR>5_BMCanAdd('repeat.txt', 3)

строка 1, команда   " no directory or unlisted buffer
строка 2, команда   if isdirectory(a:name) || !buflisted(a:num)
строка 3, команда     return 0
строка 4, команда   endif
строка 5, команда 
строка 6, команда   " no special buffer, such as terminal or popup
строка 7, команда   let buftype = getbufvar(a:num, '&buftype')
строка 8, команда   if buftype != '' && buftype != 'nofile' && buftype != 'nowrite'
строка 9, команда     return 0
строка 10, команда   endif
строка 11, команда 
строка 12, команда   " only existing buffers
строка 13, команда   return bufexists(a:num)
<SNR>5_BMCanAdd вернула #1

Начинается обработка <SNR>5_BMAdd

строка 9, команда ^Icall <SID>BMFilename(name, num)
вызов <SNR>5_BMFilename('repeat.txt', 3)

строка 1, команда   let munge = <SID>BMMunge(a:name, a:num)
вызов <SNR>5_BMMunge('repeat.txt', 3)

строка 1, команда   let name = a:fname
строка 2, команда   if name == ''
строка 3, команда     if !exists("g:menutrans_no_file")
строка 4, команда       let g:menutrans_no_file = "[No Name]"
строка 5, команда     endif
строка 6, команда     let name = g:menutrans_no_file
строка 7, команда   else
строка 8, команда     let name = fnamemodify(name, ':p:~')
строка 9, команда   endif
строка 10, команда   " detach file name and separate it out:
строка 11, команда   let name2 = fnamemodify(name, ':t')
строка 12, команда   if a:bnum >= 0
строка 13, команда     let name2 = name2 . ' (' . a:bnum . ')'
строка 14, команда   endif
строка 15, команда   let name = name2 . "\t" . <SID>BMTruncName(fnamemodify(name,':h'))
вызов <SNR>5_BMTruncName('E:\Programs\Vim\vim82\doc')

строка 1, команда   let name = a:fname
строка 2, команда   if g:bmenu_max_pathlen < 5
строка 3, команда     let name = ""
строка 4, команда   else
строка 5, команда     let len = strlen(name)
строка 6, команда     if len > g:bmenu_max_pathlen
строка 7, команда       let amountl = (g:bmenu_max_pathlen / 2) - 2
строка 8, команда       let amountr = g:bmenu_max_pathlen - amountl - 3
строка 9, команда       let pattern = '^\(.\{,' . amountl . '}\).\{-}\(.\{,' . amountr . '}\)$'
строка 10, команда       let left = substitute(name, pattern, '\1', '')
строка 11, команда       let right = substitute(name, pattern, '\2', '')
строка 12, команда       if strlen(left) + strlen(right) < len
строка 13, команда ^Ilet name = left . '...' . right
строка 14, команда       endif
строка 15, команда     endif
строка 16, команда   endif
строка 17, команда   return name
<SNR>5_BMTruncName вернула 'E:\Programs\Vim\vim82\doc'

Начинается обработка <SNR>5_BMMunge

строка 16, команда   let name = escape(name, "\\. \t|")
строка 17, команда   let name = substitute(name, "&", "&&", "g")
строка 18, команда   let name = substitute(name, "\n", "^@", "g")
строка 19, команда   return name
<SNR>5_BMMunge вернула 'repeat\.txt\ (3)\^IE:\\Programs\\Vim\\vim82\\doc'

Начинается обработка <SNR>5_BMFilename

строка 2, команда   let hash = <SID>BMHash(munge)
вызов <SNR>5_BMHash('repeat\.txt\ (3)\	E:\\Programs\\Vim\\vim82\\doc')

строка 1, команда   " Make name all upper case, so that chars are between 32 and 96
строка 2, команда   let nm = substitute(a:name, ".*", '\U\0', "")
строка 3, команда   if has("ebcdic")
строка 4, команда     " HACK: Replace all non alphabetics with 'Z'
строка 5, команда     "       Just to make it work for now.
строка 6, команда     let nm = substitute(nm, "[^A-Z]", 'Z', "g")
строка 7, команда     let sp = char2nr('A') - 1
строка 8, команда   else
строка 9, команда     let sp = char2nr(' ')
строка 10, команда   endif
строка 11, команда   " convert first six chars into a number for sorting:
строка 12, команда   return (char2nr(nm[0]) - sp) * 0x800000 + (char2nr(nm[1]) - sp) * 0x20000 + (char2nr(nm[2]) - sp) * 0x1000 + (char2nr(nm[3]) - sp) * 0x80 + (char2nr(nm[4]) - sp) * 0x20 + (char2nr(nm[5]) - sp)
<SNR>5_BMHash вернула #424482516

Начинается обработка <SNR>5_BMFilename

строка 3, команда   if s:bmenu_short == 0
строка 4, команда     let s:bmenu_items[a:num] = munge
строка 5, команда     let cmd = 'an ' . g:bmenu_priority . '.' . hash . ' &Buffers.' . munge
строка 6, команда   else
строка 7, команда     let menu_name = <SID>BMHash2(munge) . munge
строка 8, команда     let s:bmenu_items[a:num] = menu_name
строка 9, команда     let cmd = 'an ' . g:bmenu_priority . '.' . hash . '.' . hash . ' &Buffers.' . menu_name
строка 10, команда   endif
строка 11, команда   " set 'cpo' to include the <CR>
строка 12, команда   let cpo_save = &cpo
строка 13, команда   set cpo&vim
строка 14, команда   exe cmd . ' :confirm b' . a:num . '<CR>'
строка 14, команда an 60.424482516 &Buffers.repeat\.txt\ (3)\^IE:\\Programs\\Vim\\vim82\\doc :confirm b3<CR>
строка 15, команда   let &cpo = cpo_save
<SNR>5_BMFilename вернула #0

Начинается обработка <SNR>5_BMAdd

строка 10, команда ^Ilet s:bmenu_count += 1
строка 11, команда       endif
строка 12, команда     endif
строка 13, команда   endif
<SNR>5_BMAdd вернула #0

Начинается обработка для события BufAdd автокоманды "*"

Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события BufDelete автокоманды "*"
автокоманда call <SID>BMRemove()

Выполнение call <SID>BMRemove()
вызов <SNR>5_BMRemove()

строка 1, команда   if s:bmenu_wait == 0
строка 2, команда     let bufnum = expand("<abuf>")
строка 3, команда     if s:bmenu_items->has_key(bufnum)
строка 4, команда       let menu_name = s:bmenu_items[bufnum]
строка 5, команда       exe 'silent! aun &Buffers.' . menu_name
строка 5, команда silent! aun &Buffers.repeat\.txt\ (3)\^IE:\\Programs\\Vim\\vim82\\doc
строка 6, команда       let s:bmenu_count = s:bmenu_count - 1
строка 7, команда       unlet s:bmenu_items[bufnum]
строка 8, команда     endif
строка 9, команда   endif
<SNR>5_BMRemove вернула #0

Начинается обработка для события BufDelete автокоманды "*"

"repeat.txt" 
"repeat.txt" [только для чтения][unix] 1103L, 43244B
Считывание из viminfo-файла "D:\Users\Iam\_viminfo" закладок
Выполнение для события BufRead автокоманды "E:/Programs/Vim/vim82/doc/*.txt"
автокоманда setf help

Выполнение setf help
Выполнение для события FileType автокоманды "*"
автокоманда call s:LoadFTPlugin()

Выполнение call s:LoadFTPlugin()
вызов <SNR>9_LoadFTPlugin()

строка 1, команда     if exists("b:undo_ftplugin")
строка 2, команда       exe b:undo_ftplugin
строка 3, команда       unlet! b:undo_ftplugin b:did_ftplugin
строка 4, команда     endif
строка 5, команда 
строка 6, команда     let s = expand("<amatch>")
строка 7, команда     if s != ""
строка 8, команда       if &cpo =~# "S" && exists("b:did_ftplugin")
строка 9, команда ^I" In compatible mode options are reset to the global values, need to
строка 10, команда ^I" set the local values also when a plugin was already used.
строка 11, команда ^Iunlet b:did_ftplugin
строка 12, команда       endif
строка 13, команда 
строка 14, команда       " When there is a dot it is used to separate filetype names.  Thus for
строка 15, команда       " "aaa.bbb" load "aaa" and then "bbb".
строка 16, команда       for name in split(s, '\.')
строка 17, команда ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
строка 17, команда runtime! ftplugin/help.vim ftplugin/help_*.vim ftplugin/help/*.vim
Поиск "ftplugin/help.vim ftplugin/help_*.vim ftplugin/help/*.vim" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\ftplugin/help.vim"
Поиск "D:\Users\Iam/vimfiles\ftplugin/help_*.vim"
Поиск "D:\Users\Iam/vimfiles\ftplugin/help/*.vim"
Поиск "E:\Programs\Vim/vimfiles\ftplugin/help.vim"
Поиск "E:\Programs\Vim/vimfiles\ftplugin/help_*.vim"
Поиск "E:\Programs\Vim/vimfiles\ftplugin/help/*.vim"
Поиск "E:\Programs\Vim\vim82\ftplugin/help.vim"
Обработка строки 17 командного файла "E:\Programs\Vim\vim82\ftplugin\help.vim"
строка 1, команда " Vim filetype plugin file
строка 2, команда " Language:             Vim help file
строка 3, команда " Previous Maintainer:  Nikolai Weibull <now@bitwi.se>
строка 4, команда " Latest Revision:      2018-12-29
строка 5, команда 
строка 6, команда if exists("b:did_ftplugin")
строка 7, команда   finish
строка 8, команда endif
строка 9, команда let b:did_ftplugin = 1
строка 10, команда 
строка 11, команда let s:cpo_save = &cpo
строка 12, команда set cpo&vim
строка 13, команда 
строка 14, команда let b:undo_ftplugin = "setl fo< tw< cole< cocu< keywordprg<"
строка 15, команда 
строка 16, команда setlocal formatoptions+=tcroql textwidth=78 keywordprg=:help
строка 17, команда if has("conceal")
строка 18, команда   setlocal cole=2 cocu=nc
строка 19, команда endif
строка 20, команда 
строка 21, команда let &cpo = s:cpo_save
строка 22, команда unlet s:cpo_save
Завершена обработка командного файла E:\Programs\Vim\vim82\ftplugin\help.vim
Начинается обработка <SNR>9_LoadFTPlugin
Поиск "E:\Programs\Vim\vim82\ftplugin/help_*.vim"
Поиск "E:\Programs\Vim\vim82\ftplugin/help/*.vim"
Поиск "E:\Programs\Vim/vimfiles/after\ftplugin/help.vim"
Поиск "E:\Programs\Vim/vimfiles/after\ftplugin/help_*.vim"
Поиск "E:\Programs\Vim/vimfiles/after\ftplugin/help/*.vim"
Поиск "D:\Users\Iam/vimfiles/after\ftplugin/help.vim"
Поиск "D:\Users\Iam/vimfiles/after\ftplugin/help_*.vim"
Поиск "D:\Users\Iam/vimfiles/after\ftplugin/help/*.vim"
строка 18, команда       endfor
строка 16, команда       for name in split(s, '\.')
строка 17, команда ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
строка 18, команда       endfor
строка 19, команда     endif
<SNR>9_LoadFTPlugin вернула #0

Начинается обработка для события FileType автокоманды "*"

Выполнение для события FileType автокоманды "*"
автокоманда call s:LoadIndent()

Выполнение call s:LoadIndent()
вызов <SNR>10_LoadIndent()

строка 1, команда     if exists("b:undo_indent")
строка 2, команда       exe b:undo_indent
строка 3, команда       unlet! b:undo_indent b:did_indent
строка 4, команда     endif
строка 5, команда     let s = expand("<amatch>")
строка 6, команда     if s != ""
строка 7, команда       if exists("b:did_indent")
строка 8, команда ^Iunlet b:did_indent
строка 9, команда       endif
строка 10, команда 
строка 11, команда       " When there is a dot it is used to separate filetype names.  Thus for
строка 12, команда       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
строка 13, команда       for name in split(s, '\.')
строка 14, команда ^Iexe 'runtime! indent/' . name . '.vim'
строка 14, команда runtime! indent/help.vim
Поиск "indent/help.vim" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\indent/help.vim"
Поиск "E:\Programs\Vim/vimfiles\indent/help.vim"
Поиск "E:\Programs\Vim\vim82\indent/help.vim"
Поиск "E:\Programs\Vim/vimfiles/after\indent/help.vim"
Поиск "D:\Users\Iam/vimfiles/after\indent/help.vim"
В каталогах из 'runtimepath' не найдено "indent/help.vim"
строка 15, команда       endfor
строка 13, команда       for name in split(s, '\.')
строка 14, команда ^Iexe 'runtime! indent/' . name . '.vim'
строка 15, команда       endfor
строка 16, команда     endif
<SNR>10_LoadIndent вернула #0

Начинается обработка для события FileType автокоманды "*"

Выполнение для события FileType автокоманды "*"
автокоманда exe "set syntax=" . expand("<amatch>")

Выполнение exe "set syntax=" . expand("<amatch>")
Выполнение set syntax=help
Выполнение для события Syntax автокоманды "*"
автокоманда call s:SynSet()

Выполнение call s:SynSet()
вызов <SNR>12_SynSet()

строка 1, команда   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
строка 2, команда   syn clear
строка 3, команда   if exists("b:current_syntax")
строка 4, команда     unlet b:current_syntax
строка 5, команда   endif
строка 6, команда 
строка 7, команда   let s = expand("<amatch>")
строка 8, команда   if s == "ON"
строка 9, команда     " :set syntax=ON
строка 10, команда     if &filetype == ""
строка 11, команда       echohl ErrorMsg
строка 12, команда       echo "filetype unknown"
строка 13, команда       echohl None
строка 14, команда     endif
строка 15, команда     let s = &filetype
строка 16, команда   elseif s == "OFF"
строка 17, команда     let s = ""
строка 18, команда   endif
строка 19, команда 
строка 20, команда   if s != ""
строка 21, команда     " Load the syntax file(s).  When there are several, separated by dots,
строка 22, команда     " load each in sequence.  Skip empty entries.
строка 23, команда     for name in split(s, '\.')
строка 24, команда       if !empty(name)
строка 25, команда ^Iexe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
строка 25, команда runtime! syntax/help.vim syntax/help/*.vim
Поиск "syntax/help.vim syntax/help/*.vim" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\syntax/help.vim"
Поиск "D:\Users\Iam/vimfiles\syntax/help/*.vim"
Поиск "E:\Programs\Vim/vimfiles\syntax/help.vim"
Поиск "E:\Programs\Vim/vimfiles\syntax/help/*.vim"
Поиск "E:\Programs\Vim\vim82\syntax/help.vim"
Обработка строки 25 командного файла "E:\Programs\Vim\vim82\syntax\help.vim"
строка 1, команда " Vim syntax file
строка 2, команда " Language:^IVim help file
строка 3, команда " Maintainer:^IBram Moolenaar (Bram@vim.org)
строка 4, команда " Last Change:^I2021 Jun 13
строка 5, команда 
строка 6, команда " Quit when a (custom) syntax file was already loaded
строка 7, команда if exists("b:current_syntax")
строка 8, команда   finish
строка 9, команда endif
строка 10, команда 
строка 11, команда let s:cpo_save = &cpo
строка 12, команда set cpo&vim
строка 13, команда 
строка 14, команда syn match helpHeadline^I^I"^[-A-Z .][-A-Z0-9 .()_]*\ze\(\s\+\*\|$\)"
строка 15, команда syn match helpSectionDelim^I"^===.*===$"
строка 16, команда syn match helpSectionDelim^I"^---.*--$"
строка 17, команда if has("conceal")
строка 18, команда   syn region helpExample^Imatchgroup=helpIgnore start=" >$" start="^>$" end="^[^ \t]"me=e-1 end="^<" concealends
строка 19, команда else
строка 20, команда   syn region helpExample^Imatchgroup=helpIgnore start=" >$" start="^>$" end="^[^ \t]"me=e-1 end="^<"
строка 21, команда endif
строка 22, команда if has("ebcdic")
строка 23, команда   syn match helpHyperTextJump^I"\\\@<!|[^"*|]\+|" contains=helpBar
строка 24, команда   syn match helpHyperTextEntry^I"\*[^"*|]\+\*\s"he=e-1 contains=helpStar
строка 25, команда   syn match helpHyperTextEntry^I"\*[^"*|]\+\*$" contains=helpStar
строка 26, команда else
строка 27, команда   syn match helpHyperTextJump^I"\\\@<!|[#-)!+-~]\+|" contains=helpBar
строка 28, команда   syn match helpHyperTextEntry^I"\*[#-)!+-~]\+\*\s"he=e-1 contains=helpStar
строка 29, команда   syn match helpHyperTextEntry^I"\*[#-)!+-~]\+\*$" contains=helpStar
строка 30, команда endif
строка 31, команда if has("conceal")
строка 32, команда   syn match helpBar^I^Icontained "|" conceal
строка 33, команда   syn match helpBacktick^Icontained "`" conceal
строка 34, команда   syn match helpStar^I^Icontained "\*" conceal
строка 35, команда else
строка 36, команда   syn match helpBar^I^Icontained "|"
строка 37, команда   syn match helpBacktick^Icontained "`"
строка 38, команда   syn match helpStar^I^Icontained "\*"
строка 39, команда endif
строка 40, команда syn match helpNormal^I^I"|.*====*|"
строка 41, команда syn match helpNormal^I^I"|||"
строка 42, команда syn match helpNormal^I^I":|vim:|"^I" for :help modeline
строка 43, команда syn match helpVim^I^I"\<Vim version [0-9][0-9.a-z]*"
строка 44, команда syn match helpVim^I^I"VIM REFERENCE.*"
строка 45, команда syn match helpOption^I^I"'[a-z]\{2,\}'"
строка 46, команда syn match helpOption^I^I"'t_..'"
строка 47, команда syn match helpCommand^I^I"`[^` \t]\+`"hs=s+1,he=e-1 contains=helpBacktick
строка 48, команда syn match helpCommand^I^I"\(^\|[^a-z"[]\)\zs`[^`]\+`\ze\([^a-z\t."']\|$\)"hs=s+1,he=e-1 contains=helpBacktick
строка 49, команда syn match helpHeader^I^I"\s*\zs.\{-}\ze\s\=\~$" nextgroup=helpIgnore
строка 50, команда syn match helpGraphic^I^I".* \ze`$" nextgroup=helpIgnore
строка 51, команда if has("conceal")
строка 52, команда   syn match helpIgnore^I^I"." contained conceal
строка 53, команда else
строка 54, команда   syn match helpIgnore^I^I"." contained
строка 55, команда endif
строка 56, команда syn keyword helpNote^I^Inote Note NOTE note: Note: NOTE: Notes Notes:
строка 57, команда syn keyword helpWarning^I^IWARNING WARNING: Warning:
строка 58, команда syn keyword helpDeprecated^IDEPRECATED DEPRECATED: Deprecated:
строка 59, команда syn match helpSpecial^I^I"\<N\>"
строка 60, команда syn match helpSpecial^I^I"\<N\.$"me=e-1
строка 61, команда syn match helpSpecial^I^I"\<N\.\s"me=e-2
строка 62, команда syn match helpSpecial^I^I"(N\>"ms=s+1
строка 63, команда 
строка 64, команда syn match helpSpecial^I^I"\[N]"
строка 65, команда " avoid highlighting N  N in help.txt
строка 66, команда syn match helpSpecial^I^I"N  N"he=s+1
строка 67, команда syn match helpSpecial^I^I"Nth"me=e-2
строка 68, команда syn match helpSpecial^I^I"N-1"me=e-2
строка 69, команда syn match helpSpecial^I^I"{[-a-zA-Z0-9'"*+/:%#=[\]<>.,]\+}"
строка 70, команда syn match helpSpecial^I^I"\s\[[-a-z^A-Z0-9_]\{2,}]"ms=s+1
строка 71, команда syn match helpSpecial^I^I"<[-a-zA-Z0-9_]\+>"
строка 72, команда syn match helpSpecial^I^I"<[SCM]-.>"
строка 73, команда syn match helpNormal^I^I"<---*>"
строка 74, команда syn match helpSpecial^I^I"\[range]"
строка 75, команда syn match helpSpecial^I^I"\[line]"
строка 76, команда syn match helpSpecial^I^I"\[count]"
строка 77, команда syn match helpSpecial^I^I"\[offset]"
строка 78, команда syn match helpSpecial^I^I"\[cmd]"
строка 79, команда syn match helpNormal^I^I"vim9\[cmd]"
строка 80, команда syn match helpSpecial^I^I"\[num]"
строка 81, команда syn match helpSpecial^I^I"\[+num]"
строка 82, команда syn match helpSpecial^I^I"\[-num]"
строка 83, команда syn match helpSpecial^I^I"\[+cmd]"
строка 84, команда syn match helpSpecial^I^I"\[++opt]"
строка 85, команда syn match helpSpecial^I^I"\[arg]"
строка 86, команда syn match helpSpecial^I^I"\[arguments]"
строка 87, команда syn match helpSpecial^I^I"\[ident]"
строка 88, команда syn match helpSpecial^I^I"\[addr]"
строка 89, команда syn match helpSpecial^I^I"\[group]"
строка 90, команда " Don't highlight [converted] and others that do not have a tag
строка 91, команда syn match helpNormal^I^I"\[\(readonly\|fifo\|socket\|converted\|crypted\)]"
строка 92, команда 
строка 93, команда syn match helpSpecial^I^I"CTRL-."
строка 94, команда syn match helpSpecial^I^I"CTRL-SHIFT-."
строка 95, команда syn match helpSpecial^I^I"CTRL-Break"
строка 96, команда syn match helpSpecial^I^I"CTRL-PageUp"
строка 97, команда syn match helpSpecial^I^I"CTRL-PageDown"
строка 98, команда syn match helpSpecial^I^I"CTRL-Insert"
строка 99, команда syn match helpSpecial^I^I"CTRL-Del"
строка 100, команда syn match helpSpecial^I^I"CTRL-{char}"
строка 101, команда syn region helpNotVi^I^Istart="{Vi[: ]" start="{not" start="{only" end="}" contains=helpLeadBlank,helpHyperTextJump
строка 102, команда syn match helpLeadBlank^I^I"^\s\+" contained
строка 103, команда 
строка 104, команда " Highlight group items in their own color.
строка 105, команда syn match helpComment^I^I"\t[* ]Comment\t\+[a-z].*"
строка 106, команда syn match helpConstant^I^I"\t[* ]Constant\t\+[a-z].*"
строка 107, команда syn match helpString^I^I"\t[* ]String\t\+[a-z].*"
строка 108, команда syn match helpCharacter^I^I"\t[* ]Character\t\+[a-z].*"
строка 109, команда syn match helpNumber^I^I"\t[* ]Number\t\+[a-z].*"
строка 110, команда syn match helpBoolean^I^I"\t[* ]Boolean\t\+[a-z].*"
строка 111, команда syn match helpFloat^I^I"\t[* ]Float\t\+[a-z].*"
строка 112, команда syn match helpIdentifier^I"\t[* ]Identifier\t\+[a-z].*"
строка 113, команда syn match helpFunction^I^I"\t[* ]Function\t\+[a-z].*"
строка 114, команда syn match helpStatement^I^I"\t[* ]Statement\t\+[a-z].*"
строка 115, команда syn match helpConditional^I"\t[* ]Conditional\t\+[a-z].*"
строка 116, команда syn match helpRepeat^I^I"\t[* ]Repeat\t\+[a-z].*"
строка 117, команда syn match helpLabel^I^I"\t[* ]Label\t\+[a-z].*"
строка 118, команда syn match helpOperator^I^I"\t[* ]Operator\t\+["a-z].*"
строка 119, команда syn match helpKeyword^I^I"\t[* ]Keyword\t\+[a-z].*"
строка 120, команда syn match helpException^I^I"\t[* ]Exception\t\+[a-z].*"
строка 121, команда syn match helpPreProc^I^I"\t[* ]PreProc\t\+[a-z].*"
строка 122, команда syn match helpInclude^I^I"\t[* ]Include\t\+[a-z].*"
строка 123, команда syn match helpDefine^I^I"\t[* ]Define\t\+[a-z].*"
строка 124, команда syn match helpMacro^I^I"\t[* ]Macro\t\+[a-z].*"
строка 125, команда syn match helpPreCondit^I^I"\t[* ]PreCondit\t\+[a-z].*"
строка 126, команда syn match helpType^I^I"\t[* ]Type\t\+[a-z].*"
строка 127, команда syn match helpStorageClass^I"\t[* ]StorageClass\t\+[a-z].*"
строка 128, команда syn match helpStructure^I^I"\t[* ]Structure\t\+[a-z].*"
строка 129, команда syn match helpTypedef^I^I"\t[* ]Typedef\t\+[Aa-z].*"
строка 130, команда syn match helpSpecial^I^I"\t[* ]Special\t\+[a-z].*"
строка 131, команда syn match helpSpecialChar^I"\t[* ]SpecialChar\t\+[a-z].*"
строка 132, команда syn match helpTag^I^I"\t[* ]Tag\t\+[a-z].*"
строка 133, команда syn match helpDelimiter^I^I"\t[* ]Delimiter\t\+[a-z].*"
строка 134, команда syn match helpSpecialComment^I"\t[* ]SpecialComment\t\+[a-z].*"
строка 135, команда syn match helpDebug^I^I"\t[* ]Debug\t\+[a-z].*"
строка 136, команда syn match helpUnderlined^I"\t[* ]Underlined\t\+[a-z].*"
строка 137, команда syn match helpError^I^I"\t[* ]Error\t\+[a-z].*"
строка 138, команда syn match helpTodo^I^I"\t[* ]Todo\t\+[a-z].*"
строка 139, команда 
строка 140, команда syn match helpURL `\v<(((https?|ftp|gopher)://|(mailto|file|news):)[^' ^I<>"]+|(www|web|w3)[a-z0-9_-]*\.[a-z0-9._-]+\.[^' ^I<>"]+)[a-zA-Z0-9/]`
строка 141, команда 
строка 142, команда " Additionally load a language-specific syntax file "help_ab.vim".
строка 143, команда let s:i = match(expand("%"), '\.\a\ax$')
строка 144, команда if s:i > 0
строка 145, команда   exe "runtime syntax/help_" . strpart(expand("%"), s:i + 1, 2) . ".vim"
строка 146, команда endif
строка 147, команда 
строка 148, команда " Italian
строка 149, команда if v:lang =~ '\<IT\>' || v:lang =~ '_IT\>' || v:lang =~? "italian"
строка 150, команда   syn keyword helpNote^I^Inota Nota NOTA nota: Nota: NOTA: notare Notare NOTARE notare: Notare: NOTARE:
строка 151, команда   syn match helpSpecial^I^I"Nma"me=e-2
строка 152, команда   syn match helpSpecial^I^I"Nme"me=e-2
строка 153, команда   syn match helpSpecial^I^I"Nmi"me=e-2
строка 154, команда   syn match helpSpecial^I^I"Nmo"me=e-2
строка 155, команда   syn match helpSpecial^I^I"\[interv.]"
строка 156, команда   syn region helpNotVi^I^Istart="{non" start="{solo" start="{disponibile" end="}" contains=helpLeadBlank,helpHyperTextJump
строка 157, команда endif
строка 158, команда 
строка 159, команда syn sync minlines=40
строка 160, команда 
строка 161, команда 
строка 162, команда " Define the default highlighting.
строка 163, команда " Only used when an item doesn't have highlighting yet
строка 164, команда hi def link helpIgnore^I^IIgnore
строка 165, команда hi def link helpHyperTextJump^IIdentifier
строка 166, команда hi def link helpBar^I^IIgnore
строка 167, команда hi def link helpBacktick^IIgnore
строка 168, команда hi def link helpStar^I^IIgnore
строка 169, команда hi def link helpHyperTextEntry^IString
строка 170, команда hi def link helpHeadline^IStatement
строка 171, команда hi def link helpHeader^I^IPreProc
строка 172, команда hi def link helpSectionDelim^IPreProc
строка 173, команда hi def link helpVim^I^IIdentifier
строка 174, команда hi def link helpCommand^I^IComment
строка 175, команда hi def link helpExample^I^IComment
строка 176, команда hi def link helpOption^I^IType
строка 177, команда hi def link helpNotVi^I^ISpecial
строка 178, команда hi def link helpSpecial^I^ISpecial
строка 179, команда hi def link helpNote^I^ITodo
строка 180, команда hi def link helpWarning^I^ITodo
строка 181, команда hi def link helpDeprecated^ITodo
строка 182, команда 
строка 183, команда hi def link helpComment^I^IComment
строка 184, команда hi def link helpConstant^IConstant
строка 185, команда hi def link helpString^I^IString
строка 186, команда hi def link helpCharacter^ICharacter
строка 187, команда hi def link helpNumber^I^INumber
строка 188, команда hi def link helpBoolean^I^IBoolean
строка 189, команда hi def link helpFloat^I^IFloat
строка 190, команда hi def link helpIdentifier^IIdentifier
строка 191, команда hi def link helpFunction^IFunction
строка 192, команда hi def link helpStatement^IStatement
строка 193, команда hi def link helpConditional^IConditional
строка 194, команда hi def link helpRepeat^I^IRepeat
строка 195, команда hi def link helpLabel^I^ILabel
строка 196, команда hi def link helpOperator^IOperator
строка 197, команда hi def link helpKeyword^I^IKeyword
строка 198, команда hi def link helpException^IException
строка 199, команда hi def link helpPreProc^I^IPreProc
строка 200, команда hi def link helpInclude^I^IInclude
строка 201, команда hi def link helpDefine^I^IDefine
строка 202, команда hi def link helpMacro^I^IMacro
строка 203, команда hi def link helpPreCondit^IPreCondit
строка 204, команда hi def link helpType^I^IType
строка 205, команда hi def link helpStorageClass^IStorageClass
строка 206, команда hi def link helpStructure^IStructure
строка 207, команда hi def link helpTypedef^I^ITypedef
строка 208, команда hi def link helpSpecialChar^ISpecialChar
строка 209, команда hi def link helpTag^I^ITag
строка 210, команда hi def link helpDelimiter^IDelimiter
строка 211, команда hi def link helpSpecialComment^ISpecialComment
строка 212, команда hi def link helpDebug^I^IDebug
строка 213, команда hi def link helpUnderlined^IUnderlined
строка 214, команда hi def link helpError^I^IError
строка 215, команда hi def link helpTodo^I^ITodo
строка 216, команда hi def link helpURL^I^IString
строка 217, команда 
строка 218, команда let b:current_syntax = "help"
строка 219, команда 
строка 220, команда let &cpo = s:cpo_save
строка 221, команда unlet s:cpo_save
строка 222, команда " vim: ts=8 sw=2
Завершена обработка командного файла E:\Programs\Vim\vim82\syntax\help.vim
Начинается обработка <SNR>12_SynSet
Поиск "E:\Programs\Vim\vim82\syntax/help/*.vim"
Поиск "E:\Programs\Vim/vimfiles/after\syntax/help.vim"
Поиск "E:\Programs\Vim/vimfiles/after\syntax/help/*.vim"
Поиск "D:\Users\Iam/vimfiles/after\syntax/help.vim"
Поиск "D:\Users\Iam/vimfiles/after\syntax/help/*.vim"
строка 26, команда       endif
строка 27, команда     endfor
строка 23, команда     for name in split(s, '\.')
строка 24, команда       if !empty(name)
строка 25, команда ^Iexe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
строка 26, команда       endif
строка 27, команда     endfor
строка 28, команда   endif
<SNR>12_SynSet вернула #0

Начинается обработка для события Syntax автокоманды "*"

Выполнение для события BufRead автокоманды "*"
автокоманда if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Выполнение if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Выполнение  runtime! scripts.vim | endif
Выполнение  endif
Выполнение для события BufRead автокоманды "*.txt"
автокоманда if getline('$') !~ 'vim:.*ft=help'|   setf text| endif

Выполнение if getline('$') !~ 'vim:.*ft=help'|   setf text| endif
Выполнение    setf text| endif
Выполнение  endif
Выполнение для события BufRead автокоманды "*"
автокоманда if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif

Выполнение if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
Выполнение    setf FALLBACK conf | endif
Выполнение  endif
Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('E:/Programs/Vim/vim82/doc/repeat.txt')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

Поиск "keymap/russian-typograph_utf-8.vim" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\keymap/russian-typograph_utf-8.vim"
Поиск "E:\Programs\Vim/vimfiles\keymap/russian-typograph_utf-8.vim"
Поиск "E:\Programs\Vim\vim82\keymap/russian-typograph_utf-8.vim"
Поиск "E:\Programs\Vim/vimfiles/after\keymap/russian-typograph_utf-8.vim"
Поиск "D:\Users\Iam/vimfiles/after\keymap/russian-typograph_utf-8.vim"
В каталогах из 'runtimepath' не найдено "keymap/russian-typograph_utf-8.vim"
Поиск "keymap/russian-typograph.vim" в "D:\Users\Iam/vimfiles,E:\Programs\Vim/vimfiles,E:\Programs\Vim\vim82,E:\Programs\Vim/vimfiles/after,D:\Users\Iam/vimfiles/after"
Поиск "D:\Users\Iam/vimfiles\keymap/russian-typograph.vim"
Поиск "E:\Programs\Vim/vimfiles\keymap/russian-typograph.vim"
Поиск "E:\Programs\Vim\vim82\keymap/russian-typograph.vim"
Обработка командного файла "E:\Programs\Vim\vim82\keymap\russian-typograph.vim"
строка 1, команда " Vim Keymap file for Russian characters
строка 2, команда " layout English-US 104 key 'QWERTY'
строка 3, команда "
строка 4, команда " Maintainer:^I Restorer <restorers@users.sourceforge.org>
строка 5, команда " Last Changed:^I 26 Aug 2021
строка 6, команда " Version:^I 2.1
строка 7, команда " Description:^I описание дано после изображений клавиатуры
строка 8, команда 
строка 9, команда " Расположение символов для русского языка при подключенном файле с раскладкой
строка 10, команда " клавиатуры «русская типографская» (russian-typograph.vim). Версия 2.1
строка 11, команда 
строка 12, команда 
строка 13, команда "^I^I  Ни одна из клавиш модификаторов не нажата
строка 14, команда 
строка 15, команда "^I  ,---,---,---,---,---,---,---,---,---,---,---,---,---,-------,
строка 16, команда "^I  | % | ! | — | « | » | : | , | . | ? | ( | ) | ‐ | ; | <---  |
строка 17, команда "^I  |---'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-----|
строка 18, команда "^I  | ->| | й | ц | у | к | е | н | г | ш | щ | з | х | ъ |  /  |
строка 19, команда "^I  |-----',--',--',--',--',--',--',--',--',--',--',--',--'-----|
строка 20, команда "^I  | Caps | ф | ы | в | а | п | р | о | л | д | ж | э |  Enter |
строка 21, команда "^I  |------'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'--------|
строка 22, команда "^I  | Shift  | я | ч | с | м | и | т | ь | б | ю | ё |  Shift   |
строка 23, команда "^I  |------,-',--'--,'---'---'---'---'---'---'-,-'---',--,------|
строка 24, команда "^I  | Ctrl |  | Alt |                          | Alt  |  | Ctrl |
строка 25, команда "^I  '------'  '-----'--------------------------'------'  '------'
строка 26, команда 
строка 27, команда 
строка 28, команда "^I^I^I    Нажата клавиша SHIFT
строка 29, команда 
строка 30, команда "^I  ,---,---,---,---,---,---,---,---,---,---,---,---,---,-------,
строка 31, команда "^I  | = | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | - | + | <---  |
строка 32, команда "^I  |---'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-----|
строка 33, команда "^I  | ->| | Й | Ц | У | К | Е | Н | Г | Ш | Щ | З | Х | Ъ |     |
строка 34, команда "^I  |-----',--',--',--',--',--',--',--',--',--',--',--',--'-----|
строка 35, команда "^I  | Caps | Ф | Ы | В | А | П | Р | О | Л | Д | Ж | Э |  Enter |
строка 36, команда "^I  |------'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'--------|
строка 37, команда "^I  | SHIFT  | Я | Ч | С | М | И | Т | Ь | Б | Ю | Ё |   SHIFT  |
строка 38, команда "^I  |------,-',--'--,'---'---'---'---'---'---'-,-'---',--,------|
строка 39, команда "^I  | Ctrl |  | Alt |                          | Alt  |  | Ctrl |
строка 40, команда "^I  '------'  '-----'--------------------------'------'  '------'
строка 41, команда 
строка 42, команда 
строка 43, команда "^I^I^I     Нажата клавиша ALT
строка 44, команда 
строка 45, команда "^I  ,---,---,---,---,---,---,---,---,---,---,---,---,---,-------,
строка 46, команда "^I  | ` | № |   | “ | ” |   |   | … |   |   |   | ‑ |   | <---  |
строка 47, команда "^I  |---'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-----|
строка 48, команда "^I  | ->| |   |   |   |   |   |   |   |   |   |   | [ | ] |  \  |
строка 49, команда "^I  |-----',--',--',--',--',--',--',--',--',--',--',--',--'-----|
строка 50, команда "^I  | Caps |   |   |   |   |   |   |   |   |   |   | ' |  Enter |
строка 51, команда "^I  |------'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'--------|
строка 52, команда "^I  | Shift  |   |   |   |   |   |   |   |   |   |   |  Shift   |
строка 53, команда "^I  |------,-',--'--,'---'---'---'---'---'---'-,-'---',--,------|
строка 54, команда "^I  | Ctrl |  | ALT |        NNBSP             | ALT  |  | Ctrl |
строка 55, команда "^I  '------'  '-----'--------------------------'------'  '------'
строка 56, команда 
строка 57, команда 
строка 58, команда "^I^I^I Нажаты клавиши SHIFT и ALT
строка 59, команда 
строка 60, команда "^I  ,---,---,---,---,---,---,---,---,---,---,---,---,---,-------,
строка 61, команда "^I  | ~ |   | @ | # | $ |   | ^ | & | * |   |   | _ |   | <---  |
строка 62, команда "^I  |---'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-----|
строка 63, команда "^I  | ->| |   |   |   |   |   |   |   |   |   |   | { | } |  |  |
строка 64, команда "^I  |-----',--',--',--',--',--',--',--',--',--',--',--',--'-----|
строка 65, команда "^I  | Caps |   |   |   |   |   |   |   |   |   |   | " |  Enter |
строка 66, команда "^I  |------'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'--------|
строка 67, команда "^I  | SHIFT  |   |   |   |   |   |   |   | < | > |   |  SHIFT   |
строка 68, команда "^I  |------,-',--'--,'---'---'---'---'---'---'-,-'---',--,------|
строка 69, команда "^I  | Ctrl |  | ALT |                          | ALT  |  | Ctrl |
строка 70, команда "^I  '------'  '-----'--------------------------'------'  '------'
строка 71, команда 
строка 72, команда 
строка 73, команда "^I^I^I Нажаты клавиши SHIFT и CTRL
строка 74, команда 
строка 75, команда "^I  ,---,---,---,---,---,---,---,---,---,---,---,---,---,-------,
строка 76, команда "^I  |   |   |   |   |   |   |   |   |   |   |   |   |   | <---  |
строка 77, команда "^I  |---'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-----|
строка 78, команда "^I  | ->| |   |   |   |   |   |   |   |   |   |   |   |   |     |
строка 79, команда "^I  |-----',--',--',--',--',--',--',--',--',--',--',--',--'-----|
строка 80, команда "^I  | Caps |   |   |   |   |   |   |   |   |   |   |   |  Enter |
строка 81, команда "^I  |------'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'-,-'--------|
строка 82, команда "^I  | SHIFT  |   |   |   |   |   |   |   |   |   |   |  SHIFT   |
строка 83, команда "^I  |------,-',--'--,'---'---'---'---'---'---'-,-'---',--,------|
строка 84, команда "^I  | CTRL |  | Alt |          NBSP            | Alt  |  | CTRL |
строка 85, команда "^I  '------'  '-----'--------------------------'------'  '------'
строка 86, команда 
строка 87, команда 
строка 88, команда " Раскладка сделана на основе раскладки «русская машинопись» (KBDRU1.DLL),
строка 89, команда " поставляемой в составе ОС MS Windows.
строка 90, команда "
строка 91, команда " Как видите, принцип достаточно простой, — при наборе русского текста все
строка 92, команда " буквы, знаки пунктуации и большинство специальных символов находятся под
строка 93, команда " пальцами и их набор не требует нажатия каких-то дополнительных клавиш.  При
строка 94, команда " наборе символов, которые отсутствуют в русской раскладке, но есть в раскладке
строка 95, команда " US-International, требуется нажать или клавишу <ALT>, если в английской
строка 96, команда " раскладке они набираются без модификаторов, или нажать <ALT>+<SHIFT>, если они
строка 97, команда " набираются с модификатором <SHIFT>.
строка 98, команда 
строка 99, команда scriptencoding utf-8
строка 100, команда 
строка 101, команда let b:keymap_name ="RUS"
строка 102, команда 
строка 103, команда loadkeymap
Завершена обработка командного файла E:\Programs\Vim\vim82\keymap\russian-typograph.vim
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

Выполнение для события BufLeave автокоманды "*"
автокоманда if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Выполнение if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Выполнение let w:netrw_prvfile= expand("%:p")|endif
Выполнение endif
Выполнение для события WinLeave автокоманды "*"
автокоманда call s:Remove_Matches()

Выполнение call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка для события WinLeave автокоманды "*"

Выполнение для события WinEnter автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события WinEnter автокоманды "*"

Выполнение для события BufEnter автокоманды "*"
автокоманда sil call s:LocalBrowse(expand("<amatch>"))

Выполнение sil call s:LocalBrowse(expand("<amatch>"))
вызов <SNR>19_LocalBrowse('D:/Project/vim/my_plugins/colo2css/HiAttr2CssDecl.vim')

строка 1, команда   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
строка 2, команда   " Otherwise, the BufEnter event gets triggered when attempts to write to
строка 3, команда   " the DBG buffer are made.
строка 4, команда 
строка 5, команда   if !exists("s:vimentered")
строка 6, команда    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
строка 7, команда    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
строка 8, команда "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
строка 9, команда "   call Dret("s:LocalBrowse")
строка 10, команда    return
строка 11, команда   endif
строка 12, команда 
строка 13, команда "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
строка 14, команда 
строка 15, команда   if has("amiga")
строка 16, команда    " The check against '' is made for the Amiga, where the empty
строка 17, команда    " string is the current directory and not checking would break
строка 18, команда    " things such as the help command.
строка 19, команда "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
строка 20, команда    if a:dirname != '' && isdirectory(a:dirname)
строка 21, команда     sil! call netrw#LocalBrowseCheck(a:dirname)
строка 22, команда     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 23, команда      exe w:netrw_bannercnt
строка 24, команда     endif
строка 25, команда    endif
строка 26, команда 
строка 27, команда   elseif isdirectory(a:dirname)
строка 28, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
строка 29, команда "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
строка 30, команда    " Jul 13, 2021: for whatever reason, preceding the following call with
строка 31, команда    " a   sil!  causes an unbalanced if-endif vim error
строка 32, команда    call netrw#LocalBrowseCheck(a:dirname)
строка 33, команда    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
строка 34, команда     exe w:netrw_bannercnt
строка 35, команда    endif
строка 36, команда 
строка 37, команда   else
строка 38, команда    " not a directory, ignore it
строка 39, команда "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
строка 40, команда   endif
строка 41, команда 
строка 42, команда "  call Dret("s:LocalBrowse")
<SNR>19_LocalBrowse вернула #0

Начинается обработка для события BufEnter автокоманды "*"

chdir(D:\Project\vim\my_plugins\colo2css)
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"


команда call HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})
вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
->0 function HiAttr2CssDecl
строка 1, команда let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
->0 function HiAttr2CssDecl
строка 97, команда endif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iif s:fg_norm && s:bg_norm
строка 220, команда ^I    let @i = ''
строка 221, команда ^I    let @f = ''
строка 222, команда ^I    let @x = ''
строка 223, команда ^I    let @b = ''
строка 224, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 225, команда ^I    if 0 <= l:idx
строка 226, команда ^I^Ilet @i = l:idx
строка 227, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 228, команда ^I    endif
строка 229, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 230, команда ^I    if 0 <= l:idx
строка 231, команда ^I^Ilet @x = l:idx
строка 232, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 233, команда ^I    endif
строка 234, команда ^I    if @f && @b
строка 235, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 236, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 237, команда ^I    elseif @f && !@b
строка 238, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 239, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 240, команда ^I    elseif !@f && @b
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 242, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 243, команда ^I    elseif !@f && !@b
строка 244, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 245, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 246, команда ^I    endif
строка 247, команда ^Ielse
строка 248, команда ^I    return -1
->0 function HiAttr2CssDecl
строка 248, команда Достигнуто окончание обрабатываемой функции
строка 248, команда prev
Обнаружена ошибка при обработке function HiAttr2CssDecl
строка  248:
E163: Для редактирования доступен только один файл
->0 function HiAttr2CssDecl
строка 248, команда Достигнуто окончание обрабатываемой функции
Это вершина стека вызовов. Кадр стека 0
Это начало стека вызовов. Кадр стека 0
Это начало стека вызовов. Кадр стека 0
->0 function HiAttr2CssDecl
строка 248, команда Достигнуто окончание обрабатываемой функции
HiAttr2CssDecl вернула #-1

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов GetVimIndent()

строка 1, команда   let ignorecase_save = &ignorecase
строка 2, команда   try
строка 3, команда     let &ignorecase = 0
строка 4, команда     return GetVimIndentIntern()
вызов GetVimIndentIntern()

строка 1, команда   " Find a non-blank line above the current line.
строка 2, команда   let lnum = prevnonblank(v:lnum - 1)
строка 3, команда 
строка 4, команда   " The previous line, ignoring line continuation
строка 5, команда   let prev_text_end = lnum > 0 ? getline(lnum) : ''
строка 6, команда 
строка 7, команда   " If the current line doesn't start with '\' or '"\ ' and below a line that
строка 8, команда   " starts with '\' or '"\ ', use the indent of the line above it.
строка 9, команда   let cur_text = getline(v:lnum)
строка 10, команда   if cur_text !~ s:lineContPat
строка 11, команда     while lnum > 0 && getline(lnum) =~ s:lineContPat
строка 12, команда       let lnum = lnum - 1
строка 13, команда     endwhile
строка 14, команда   endif
строка 15, команда 
строка 16, команда   " At the start of the file use zero indent.
строка 17, команда   if lnum == 0
строка 18, команда     return 0
строка 19, команда   endif
строка 20, команда 
строка 21, команда   " the start of the previous line, skipping over line continuation
строка 22, команда   let prev_text = getline(lnum)
строка 23, команда   let found_cont = 0
строка 24, команда 
строка 25, команда   " Add a 'shiftwidth' after :if, :while, :try, :catch, :finally, :function
строка 26, команда   " and :else.  Add it three times for a line that starts with '\' or '"\ '
строка 27, команда   " after a line that doesn't (or g:vim_indent_cont if it exists).
строка 28, команда   let ind = indent(lnum)
строка 29, команда 
строка 30, команда   " In heredoc indenting works completely differently.
строка 31, команда   if has('syntax_items') 
строка 32, команда     let syn_here = synIDattr(synID(v:lnum, 1, 1), "name")
строка 33, команда     if syn_here =~ 'vimLetHereDocStop'
строка 34, команда       " End of heredoc: use indent of matching start line
строка 35, команда       let lnum = v:lnum - 1
строка 36, команда       while lnum > 0
строка 37, команда ^Ilet attr = synIDattr(synID(lnum, 1, 1), "name")
строка 38, команда ^Iif attr != '' && attr !~ 'vimLetHereDoc'
строка 39, команда ^I  return indent(lnum)
строка 40, команда ^Iendif
строка 41, команда ^Ilet lnum -= 1
строка 42, команда       endwhile
строка 43, команда       return 0
строка 44, команда     endif
строка 45, команда     if syn_here =~ 'vimLetHereDoc'
строка 46, команда       if synIDattr(synID(lnum, 1, 1), "name") !~ 'vimLetHereDoc'
строка 47, команда ^I" First line in heredoc: increase indent
строка 48, команда ^Ireturn ind + shiftwidth()
строка 49, команда       endif
строка 50, команда       " Heredoc continues: no change in indent
строка 51, команда       return ind
строка 52, команда     endif
строка 53, команда   endif
строка 54, команда 
строка 55, команда   if cur_text =~ s:lineContPat && v:lnum > 1 && prev_text !~ s:lineContPat
строка 56, команда     let found_cont = 1
строка 57, команда     if exists("g:vim_indent_cont")
строка 58, команда       let ind = ind + g:vim_indent_cont
строка 59, команда     else
строка 60, команда       let ind = ind + shiftwidth() * 3
строка 61, команда     endif
строка 62, команда   elseif prev_text =~ '^\s*aug\%[roup]\s\+' && prev_text !~ '^\s*aug\%[roup]\s\+[eE][nN][dD]\>'
строка 63, команда     let ind = ind + shiftwidth()
строка 64, команда   else
строка 65, команда     " A line starting with :au does not increment/decrement indent.
строка 66, команда     " A { may start a block or a dict.  Assume that when a } follows it's a
строка 67, команда     " terminated dict.
строка 68, команда     if prev_text !~ '^\s*au\%[tocmd]' && prev_text !~ '^\s*{.*}'
строка 69, команда       let i = match(prev_text, '\(^\||\)\s*\(export\s\+\)\?\({\|\(if\|wh\%[ile]\|for\|try\|cat\%[ch]\|fina\|finall\%[y]\|fu\%[nction]\|def\|el\%[seif]\)\>\)')
строка 70, команда       if i >= 0
строка 71, команда ^Ilet ind += shiftwidth()
строка 72, команда ^Iif strpart(prev_text, i, 1) == '|' && has('syntax_items') && synIDattr(synID(lnum, i, 1), "name") =~ '\(Comment\|String\)$'
строка 74, команда ^I  let ind -= shiftwidth()
строка 75, команда ^Iendif
строка 76, команда       endif
строка 77, команда     endif
строка 78, команда   endif
строка 79, команда 
строка 80, команда   " If the previous line contains an "end" after a pipe, but not in an ":au"
строка 81, команда   " command.  And not when there is a backslash before the pipe.
строка 82, команда   " And when syntax HL is enabled avoid a match inside a string.
строка 83, команда   let i = match(prev_text, '[^\\]|\s*\(ene\@!\)')
строка 84, команда   if i > 0 && prev_text !~ '^\s*au\%[tocmd]'
строка 85, команда     if !has('syntax_items') || synIDattr(synID(lnum, i + 2, 1), "name") !~ '\(Comment\|String\)$'
строка 86, команда       let ind = ind - shiftwidth()
строка 87, команда     endif
строка 88, команда   endif
строка 89, команда 
строка 90, команда   " For a line starting with "}" find the matching "{".  If it is at the start
строка 91, команда   " of the line align with it, probably end of a block.
строка 92, команда   " Use the mapped "%" from matchit to find the match, otherwise we may match
строка 93, команда   " a { inside a comment or string.
строка 94, команда   if cur_text =~ '^\s*}'
строка 95, команда     if maparg('%') != ''
строка 96, команда       exe v:lnum
строка 97, команда       silent! normal %
строка 98, команда       if line('.') < v:lnum && getline('.') =~ '^\s*{'
строка 99, команда ^Ilet ind = indent('.')
строка 100, команда       endif
строка 101, команда     else
строка 102, команда       " todo: use searchpair() to find a match
строка 103, команда     endif
строка 104, команда   endif
строка 105, команда 
строка 106, команда   " Below a line starting with "}" find the matching "{".  If it is at the
строка 107, команда   " end of the line we must be below the end of a dictionary.
строка 108, команда   if prev_text =~ '^\s*}'
строка 109, команда     if maparg('%') != ''
строка 110, команда       exe lnum
строка 111, команда       silent! normal %
строка 112, команда       if line('.') == lnum || getline('.') !~ '^\s*{'
строка 113, команда ^Ilet ind = ind - shiftwidth()
строка 114, команда       endif
строка 115, команда     else
строка 116, команда       " todo: use searchpair() to find a match
строка 117, команда     endif
строка 118, команда   endif
строка 119, команда 
строка 120, команда   " Below a line starting with "]" we must be below the end of a list.
строка 121, команда   " Include a "}" and "},} in case a dictionary ends too.
строка 122, команда   if prev_text_end =~ '^\s*\(},\=\s*\)\=]'
строка 123, команда     let ind = ind - shiftwidth()
строка 124, команда   endif
строка 125, команда 
строка 126, команда   let ends_in_comment = has('syntax_items') && synIDattr(synID(lnum, len(getline(lnum)), 1), "name") =~ '\(Comment\|String\)$'
строка 128, команда 
строка 129, команда   " A line ending in "{" or "[" is most likely the start of a dict/list literal,
строка 130, команда   " indent the next line more.  Not for a continuation line or {{{.
строка 131, команда   if !ends_in_comment && prev_text_end =~ '\s[{[]\s*$' && !found_cont
строка 132, команда     let ind = ind + shiftwidth()
строка 133, команда   endif
строка 134, команда 
строка 135, команда   " Subtract a 'shiftwidth' on a :endif, :endwhile, :catch, :finally, :endtry,
строка 136, команда   " :endfun, :enddef, :else and :augroup END.
строка 137, команда   if cur_text =~ '^\s*\(ene\@!\|cat\|finall\|el\|aug\%[roup]\s\+[eE][nN][dD]\)'
строка 138, команда     let ind = ind - shiftwidth()
строка 139, команда   endif
строка 140, команда 
строка 141, команда   return ind
GetVimIndentIntern вернула #8

Начинается обработка GetVimIndent

:return 8 приостановлено

строка 5, команда   finally
строка 6, команда     let &ignorecase = ignorecase_save
строка 7, команда   endtry
:return 8 возобновлено

GetVimIndent вернула #8
-- РЕЖИМ ВСТАВКИ --
Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

вызов GetVimIndent()

строка 1, команда   let ignorecase_save = &ignorecase
строка 2, команда   try
строка 3, команда     let &ignorecase = 0
строка 4, команда     return GetVimIndentIntern()
вызов GetVimIndentIntern()

строка 1, команда   " Find a non-blank line above the current line.
строка 2, команда   let lnum = prevnonblank(v:lnum - 1)
строка 3, команда 
строка 4, команда   " The previous line, ignoring line continuation
строка 5, команда   let prev_text_end = lnum > 0 ? getline(lnum) : ''
строка 6, команда 
строка 7, команда   " If the current line doesn't start with '\' or '"\ ' and below a line that
строка 8, команда   " starts with '\' or '"\ ', use the indent of the line above it.
строка 9, команда   let cur_text = getline(v:lnum)
строка 10, команда   if cur_text !~ s:lineContPat
строка 11, команда     while lnum > 0 && getline(lnum) =~ s:lineContPat
строка 12, команда       let lnum = lnum - 1
строка 13, команда     endwhile
строка 14, команда   endif
строка 15, команда 
строка 16, команда   " At the start of the file use zero indent.
строка 17, команда   if lnum == 0
строка 18, команда     return 0
строка 19, команда   endif
строка 20, команда 
строка 21, команда   " the start of the previous line, skipping over line continuation
строка 22, команда   let prev_text = getline(lnum)
строка 23, команда   let found_cont = 0
строка 24, команда 
строка 25, команда   " Add a 'shiftwidth' after :if, :while, :try, :catch, :finally, :function
строка 26, команда   " and :else.  Add it three times for a line that starts with '\' or '"\ '
строка 27, команда   " after a line that doesn't (or g:vim_indent_cont if it exists).
строка 28, команда   let ind = indent(lnum)
строка 29, команда 
строка 30, команда   " In heredoc indenting works completely differently.
строка 31, команда   if has('syntax_items') 
строка 32, команда     let syn_here = synIDattr(synID(v:lnum, 1, 1), "name")
строка 33, команда     if syn_here =~ 'vimLetHereDocStop'
строка 34, команда       " End of heredoc: use indent of matching start line
строка 35, команда       let lnum = v:lnum - 1
строка 36, команда       while lnum > 0
строка 37, команда ^Ilet attr = synIDattr(synID(lnum, 1, 1), "name")
строка 38, команда ^Iif attr != '' && attr !~ 'vimLetHereDoc'
строка 39, команда ^I  return indent(lnum)
строка 40, команда ^Iendif
строка 41, команда ^Ilet lnum -= 1
строка 42, команда       endwhile
строка 43, команда       return 0
строка 44, команда     endif
строка 45, команда     if syn_here =~ 'vimLetHereDoc'
строка 46, команда       if synIDattr(synID(lnum, 1, 1), "name") !~ 'vimLetHereDoc'
строка 47, команда ^I" First line in heredoc: increase indent
строка 48, команда ^Ireturn ind + shiftwidth()
строка 49, команда       endif
строка 50, команда       " Heredoc continues: no change in indent
строка 51, команда       return ind
строка 52, команда     endif
строка 53, команда   endif
строка 54, команда 
строка 55, команда   if cur_text =~ s:lineContPat && v:lnum > 1 && prev_text !~ s:lineContPat
строка 56, команда     let found_cont = 1
строка 57, команда     if exists("g:vim_indent_cont")
строка 58, команда       let ind = ind + g:vim_indent_cont
строка 59, команда     else
строка 60, команда       let ind = ind + shiftwidth() * 3
строка 61, команда     endif
строка 62, команда   elseif prev_text =~ '^\s*aug\%[roup]\s\+' && prev_text !~ '^\s*aug\%[roup]\s\+[eE][nN][dD]\>'
строка 63, команда     let ind = ind + shiftwidth()
строка 64, команда   else
строка 65, команда     " A line starting with :au does not increment/decrement indent.
строка 66, команда     " A { may start a block or a dict.  Assume that when a } follows it's a
строка 67, команда     " terminated dict.
строка 68, команда     if prev_text !~ '^\s*au\%[tocmd]' && prev_text !~ '^\s*{.*}'
строка 69, команда       let i = match(prev_text, '\(^\||\)\s*\(export\s\+\)\?\({\|\(if\|wh\%[ile]\|for\|try\|cat\%[ch]\|fina\|finall\%[y]\|fu\%[nction]\|def\|el\%[seif]\)\>\)')
строка 70, команда       if i >= 0
строка 71, команда ^Ilet ind += shiftwidth()
строка 72, команда ^Iif strpart(prev_text, i, 1) == '|' && has('syntax_items') && synIDattr(synID(lnum, i, 1), "name") =~ '\(Comment\|String\)$'
строка 74, команда ^I  let ind -= shiftwidth()
строка 75, команда ^Iendif
строка 76, команда       endif
строка 77, команда     endif
строка 78, команда   endif
строка 79, команда 
строка 80, команда   " If the previous line contains an "end" after a pipe, but not in an ":au"
строка 81, команда   " command.  And not when there is a backslash before the pipe.
строка 82, команда   " And when syntax HL is enabled avoid a match inside a string.
строка 83, команда   let i = match(prev_text, '[^\\]|\s*\(ene\@!\)')
строка 84, команда   if i > 0 && prev_text !~ '^\s*au\%[tocmd]'
строка 85, команда     if !has('syntax_items') || synIDattr(synID(lnum, i + 2, 1), "name") !~ '\(Comment\|String\)$'
строка 86, команда       let ind = ind - shiftwidth()
строка 87, команда     endif
строка 88, команда   endif
строка 89, команда 
строка 90, команда   " For a line starting with "}" find the matching "{".  If it is at the start
строка 91, команда   " of the line align with it, probably end of a block.
строка 92, команда   " Use the mapped "%" from matchit to find the match, otherwise we may match
строка 93, команда   " a { inside a comment or string.
строка 94, команда   if cur_text =~ '^\s*}'
строка 95, команда     if maparg('%') != ''
строка 96, команда       exe v:lnum
строка 97, команда       silent! normal %
строка 98, команда       if line('.') < v:lnum && getline('.') =~ '^\s*{'
строка 99, команда ^Ilet ind = indent('.')
строка 100, команда       endif
строка 101, команда     else
строка 102, команда       " todo: use searchpair() to find a match
строка 103, команда     endif
строка 104, команда   endif
строка 105, команда 
строка 106, команда   " Below a line starting with "}" find the matching "{".  If it is at the
строка 107, команда   " end of the line we must be below the end of a dictionary.
строка 108, команда   if prev_text =~ '^\s*}'
строка 109, команда     if maparg('%') != ''
строка 110, команда       exe lnum
строка 111, команда       silent! normal %
строка 112, команда       if line('.') == lnum || getline('.') !~ '^\s*{'
строка 113, команда ^Ilet ind = ind - shiftwidth()
строка 114, команда       endif
строка 115, команда     else
строка 116, команда       " todo: use searchpair() to find a match
строка 117, команда     endif
строка 118, команда   endif
строка 119, команда 
строка 120, команда   " Below a line starting with "]" we must be below the end of a list.
строка 121, команда   " Include a "}" and "},} in case a dictionary ends too.
строка 122, команда   if prev_text_end =~ '^\s*\(},\=\s*\)\=]'
строка 123, команда     let ind = ind - shiftwidth()
строка 124, команда   endif
строка 125, команда 
строка 126, команда   let ends_in_comment = has('syntax_items') && synIDattr(synID(lnum, len(getline(lnum)), 1), "name") =~ '\(Comment\|String\)$'
строка 128, команда 
строка 129, команда   " A line ending in "{" or "[" is most likely the start of a dict/list literal,
строка 130, команда   " indent the next line more.  Not for a continuation line or {{{.
строка 131, команда   if !ends_in_comment && prev_text_end =~ '\s[{[]\s*$' && !found_cont
строка 132, команда     let ind = ind + shiftwidth()
строка 133, команда   endif
строка 134, команда 
строка 135, команда   " Subtract a 'shiftwidth' on a :endif, :endwhile, :catch, :finally, :endtry,
строка 136, команда   " :endfun, :enddef, :else and :augroup END.
строка 137, команда   if cur_text =~ '^\s*\(ene\@!\|cat\|finall\|el\|aug\%[roup]\s\+[eE][nN][dD]\)'
строка 138, команда     let ind = ind - shiftwidth()
строка 139, команда   endif
строка 140, команда 
строка 141, команда   return ind
GetVimIndentIntern вернула #8

Начинается обработка GetVimIndent

:return 8 приостановлено

строка 5, команда   finally
строка 6, команда     let &ignorecase = ignorecase_save
строка 7, команда   endtry
:return 8 возобновлено

GetVimIndent вернула #8

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9734B записано
"HiAttr2CssDecl.vim" 300L, 9734B записано

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iif s:fg_norm && s:bg_norm
строка 220, команда ^I    let @i = ''
строка 221, команда ^I    let @f = ''
строка 222, команда ^I    let @x = ''
строка 223, команда ^I    let @b = ''
строка 224, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 225, команда ^I    if 0 <= l:idx
строка 226, команда ^I^Ilet @i = l:idx
строка 227, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 228, команда ^I    endif
строка 229, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 230, команда ^I    if 0 <= l:idx
строка 231, команда ^I^Ilet @x = l:idx
строка 232, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 233, команда ^I    endif
строка 234, команда ^I    if @f && @b
строка 235, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 236, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 237, команда ^I    elseif @f && !@b
строка 238, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 239, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 240, команда ^I    elseif !@f && @b
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 242, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 243, команда ^I    elseif !@f && !@b
строка 244, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 245, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 246, команда ^I    endif
строка 247, команда ^Ielse
строка 248, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let s:bg_norm = '#282828'
строка 11, команда let s:fg_norm = '#ebdbb2'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm ' s:fg_norm
                                                            fg_norm  #ebdbb2
строка 220, команда ^Iecho 'bg_norm ' s:bg_norm
bg_norm  #282828
строка 221, команда ^Iif s:fg_norm && s:bg_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВСТАВКИ --
Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВСТАВКИ --

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9750B записано
"HiAttr2CssDecl.vim" 300L, 9750B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let s:bg_norm = '#282828'
строка 11, команда let s:fg_norm = '#ebdbb2'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' s:fg_norm
                                                                    fg_norm in rvrs  #ebdbb2
строка 220, команда ^Iecho 'bg_norm in rvrs ' s:bg_norm
bg_norm in rvrs  #282828
строка 221, команда ^Iif s:fg_norm && s:bg_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВИЗУАЛЬНЫЙ ПОСИМВОЛЬНЫЙ --
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВИЗУАЛЬНЫЙ ПОСИМВОЛЬНЫЙ --
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9750B записано
"HiAttr2CssDecl.vim" 300L, 9750B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let s:bg_norm = '#282828'
строка 11, команда let s:fg_norm = '#282828'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if s:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if s:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. s:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let s:bg_norm = s:is_norm ? l:bgc : s:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if s:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if s:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. s:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. s:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let s:fg_norm = s:is_norm ? l:fgc : s:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if s:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:bg_norm .. ';' .. ' text-decoration-color: ' .. s:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if s:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. s:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. s:fg_norm .. ';' .. ' text-decoration-color: ' .. s:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' s:fg_norm
                                                                    fg_norm in rvrs  #282828
строка 220, команда ^Iecho 'bg_norm in rvrs ' s:bg_norm
bg_norm in rvrs  #282828
строка 221, команда ^Iif s:fg_norm && s:bg_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. s:bg_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. s:fg_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. s:bg_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. s:fg_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1

E121: Отсутствует определение переменной s:
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<fg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<fg_norm\> 

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

/\<bg_norm\> 

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

/\<bg_norm\> 

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа

"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9750B записано
"HiAttr2CssDecl.vim" 300L, 9750B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let g:bg_norm = '#282828'
строка 11, команда let g:fg_norm = '#282828'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if g:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if g:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let g:bg_norm = s:is_norm ? l:bgc : g:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if g:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if g:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let g:fg_norm = s:is_norm ? l:fgc : g:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if g:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:bg_norm .. ';' .. ' text-decoration-color: ' .. g:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if g:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:fg_norm .. ';' .. ' text-decoration-color: ' .. g:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' g:fg_norm
                                                                    fg_norm in rvrs  #282828
строка 220, команда ^Iecho 'bg_norm in rvrs ' g:bg_norm
bg_norm in rvrs  #282828
строка 221, команда ^Iif g:fg_norm && g:bg_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. g:bg_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. g:fg_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. g:bg_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. g:fg_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1

html_diff_one_file    #0
rainbow_conf          {'guifgs': ['#d65d0e', '#cc241d', '#b16286', '#458588'], 'ctermfgs': ['166', 'red', 'magenta', 'blue']}
html_no_foldcolumn    #1
gruvbox_italics       #0
niji_light_colours    [['blue', '#458588'], ['magenta', '#b16286'], ['red', '#cc241d'], ['166', '#d65d0e']]
vimshell_escape_colors ['#7c6f64', '#fb4934', '#b8bb26', '#fabd2f', '#83a598', '#d3869b', '#8ec07c', '#a89984', '#282828', '#fb4934', '#b8bb26', '#fe8019', '#83a598', '#d3869b', '#8ec07c', '#fbf1c7']
did_load_filetypes    #1
loaded_getscriptPlugin  v36
html_use_encoding      UTF-8
html_use_xhtml        #1
gruvbox_italicize_strings #1
loaded_vimballPlugin   v37
html_pre_wrap         #1
gruvbox_transp_bg     #1
html_font             ['IBM Plex Mono', 'Consolas']
html_dynamic_folds    #0
rbpt_colorpairs       [['blue', '#458588'], ['magenta', '#b16286'], ['red', '#cc241d'], ['166', '#d65d0e']]
menutrans_spell_change_ARG_to  Исправить\ "%s"
loaded_tutor_mode_plugin #1
loaded_tarPlugin       v32
colors_name            gruvbox8
html_no_invalid       #0
did_load_ftplugin     #1
menutrans_tags_dialog  Введите через запятую наименования файлов индексов
did_install_syntax_menu #1
semanticTermColors    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
matchparen_insert_timeout #60
loaded_zipPlugin       v31
gruvbox_filetype_hi_groups #1
html_prevent_copy      
html_id_expr           
loaded_rrhelper       #1
html_use_css          #1
loaded_spellfile_plugin #1
html_number_lines     #0
did_indent_on         #1
semanticUseBackground #0
menutrans_fileformat_choices  &1. Unix^@&2. Dos^@&3. Mac^@Отмена (&C)
rainbow_guifgs        ['#d65d0e', '#cc241d', '#b16286', '#458588']
niji_dark_colours     [['blue', '#458588'], ['magenta', '#b16286'], ['red', '#cc241d'], ['166', '#d65d0e']]
semanticPersistCacheLocation  D:\Users\Iam/.semantic-highlight-cache
bmenu_priority        #60
indentLine_color_term #239
syntax_on             #1
html_whole_filler     #0
fg_norm                #282828
bmenu_max_pathlen     #35
menutrans_textwidth_dialog  Введите количество символов для установки ширины текста^@Чтобы отменить форматирование, введите 0
menutrans_fileformat_dialog  Выберите формат файла
did_install_default_menus #1
loaded_netrwPlugin     v171
loaded_logiPat         v4
menutrans_spell_add_ARG_to_word_list  Добавить\ "%s"\ в\ словарь
html_line_ids         #0
menutrans_help_dialog  Наберите команду или слово, которые требуется найти в документации.^@^@Чтобы найти команды режима вставки, используйте приставку i_ (например, i_CTRL-X)^@Чтобы найти команды командной строки, используйте приставку c_ (например, c_<Del>)^@Чтобы найти информацию о параметрах, используйте символ ' (например, 'shftwidth')
html_expand_tabs      #0
loaded_gzip           #1
html_ignore_conceal   #0
zipPlugin_ext          *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip
loaded_2html_plugin    vim8.1_v2
gruvbox_plugin_hi_groups #1
loaded_matchparen     #1
bg_norm                #282828
vimsyn_embed           lmpPr
menutrans_no_file      [Безымянный]
html_no_progress      #0
menutrans_spell_ignore_ARG  Пропустить\ "%s"
matchparen_timeout    #300
semanticGUIColors     ['#9CD8F7', '#F5FA1D', '#F97C65', '#35D27F', '#EB75D6', '#E5D180', '#8997F5', '#D49DA5', '#7FEC35', '#F6B223', '#B4F1C3', '#99B730', '#F67C1B', '#3AC6BE', '#EAAFF1', '#DE9A4E', '#BBEA87', '#EEF06D', '#8FB272', '#EAA481', '#F58AAE', '#80B09B', '#5DE866', '#B5A5C5', '#88ADE6', '#4DAABD', '#EDD528', '#FA6BB2', '#47F2D4', '#F47F86', '#2ED8FF', '#B8E01C', '#C5A127', '#74BB46', '#D386F1', '#97DFD6', '#B1A96F', '#66BB75', '#97AA49', '#EF874A', '#48EDF0', '#C0AE50', '#89AAB6', '#D7D1EB', '#5EB894', '#57F0AC', '#B5AF1B', '#B7A5F0', '#8BE289', '#D38AC6', '#C8EE63', '#ED9C36', '#85BA5F', '#9DEA74', '#85C52D', '#40B7E5', '#EEA3C2', '#7CE9B6', '#8CEC58', '#D8A66C', '#51C03B', '#C4CE64', '#45E648', '#4DC15E', '#63A5F3', '#EA8C66', '#D2D43E', '#E5BCE8', '#E4B7CB', '#B092F4', '#44C58C', '#D1E998', '#76E4F2', '#E19392', '#A8E5A4', '#BF9FD6', '#E8C25B', '#58F596', '#6BAEAC', '#94C291', '#7EF1DB', '#E8D65C', '#A7EA38', '#D38AE0', '#ECF453', '#5CD8B8', '#B6BF6B', '#BEE1F1', '#B1D43E', '#EBE77B', '#84A5CD', '#CFEF7A', '#A3C557', '#E4BB34', '#ECB151', '#BDC9F2', '#5EB0E9', '#E09764', '#9BE3C8', '#B3ADDC', '#B2AC36', '#C8CD4F', '#C797AF', '#DCDB26', '#BCA85E', '#E495A5', '#F37DB8', '#70C0B1', '#5AED7D', '#E49482', '#8AA1F0', '#B3EDEE', '#DAEE34', '#EBD646', '#ECA2D2', '#A0A7E6', '#3EBFD3', '#C098BF', '#F1882E', '#77BFDF', '#7FBFC7', '#D4951F', '#A5C0D0', '#B892DE', '#F8CB31', '#75D0D9', '#A6A0B4', '#EA98E4', '#F38BE6', '#DC83A4']
ctags_command          ctags -R .
paste#paste_cmd       {'v': '"-c<Esc>:call paste#Paste()<CR>', 'i': '^\^O"+gP', 'n': ':call paste#Paste()<CR>'}
semanticUseCache      #1
menutrans_set_lang_to  Включить проверку для языка
rainbow_ctermfgs      ['166', 'red', 'magenta', 'blue']
html_ignore_folding   #1
html_no_pre           #0
semanticPersistCache  #1
indentLine_color_gui   #504945
semanticEnableBlacklist #1
menutrans_path_dialog  Введите через запятую наименования каталогов, где будет выполняться поиск файлов
terminal_ansi_colors  ['#282828', '#cc241d', '#98971a', '#d79921', '#458588', '#b16286', '#689d6a', '#a89984', '#928374', '#fb4934', '#b8bb26', '#fabd2f', '#83a598', '#d3869b', '#8ec07c', '#ebdbb2']
did_menu_trans        #1
ft_ignore_pat          \.\(Z\|gz\|bz2\|zip\|tgz\)$
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВИЗУАЛЬНЫЙ ПОСИМВОЛЬНЫЙ --
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВИЗУАЛЬНЫЙ ПОСИМВОЛЬНЫЙ --
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9750B записано
"HiAttr2CssDecl.vim" 300L, 9750B записано
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
строка 34, команда     endif
строка 35, команда   endif
строка 36, команда 
строка 37, команда   " Figure out the arguments for searchpairpos().
строка 38, команда   if i % 2 == 0
строка 39, команда     let s_flags = 'nW'
строка 40, команда     let c2 = plist[i + 1]
строка 41, команда   else
строка 42, команда     let s_flags = 'nbW'
строка 43, команда     let c2 = c
строка 44, команда     let c = plist[i - 1]
строка 45, команда   endif
строка 46, команда   if c == '['
строка 47, команда     let c = '\['
строка 48, команда     let c2 = '\]'
строка 49, команда   endif
строка 50, команда 
строка 51, команда   " Find the match.  When it was just before the cursor move it there for a
строка 52, команда   " moment.
строка 53, команда   if before > 0
строка 54, команда     let has_getcurpos = exists("*getcurpos")
строка 55, команда     if has_getcurpos
строка 56, команда       " getcurpos() is more efficient but doesn't exist before 7.4.313.
строка 57, команда       let save_cursor = getcurpos()
строка 58, команда     else
строка 59, команда       let save_cursor = winsaveview()
строка 60, команда     endif
строка 61, команда     call cursor(c_lnum, c_col - before)
строка 62, команда   endif
строка 63, команда 
строка 64, команда   if !has("syntax") || !exists("g:syntax_on")
строка 65, команда     let s_skip = "0"
строка 66, команда   else
строка 67, команда     " Build an expression that detects whether the current cursor position is
строка 68, команда     " in certain syntax types (string, comment, etc.), for use as
строка 69, команда     " searchpairpos()'s skip argument.
строка 70, команда     " We match "escape" for special items, such as lispEscapeSpecial, and
строка 71, команда     " match "symbol" for lispBarSymbol.
строка 72, команда     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
строка 74, команда     " If executing the expression determines that the cursor is currently in
строка 75, команда     " one of the syntax types, then we want searchpairpos() to find the pair
строка 76, команда     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
строка 77, команда     " outside of the syntax types and s_skip should keep its value so we skip
строка 78, команда     " any matching pair inside the syntax types.
строка 79, команда     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
строка 80, команда     try
строка 81, команда       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
строка 81, команда if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
строка 81, команда  let s_skip = "0" | endif
строка 81, команда  endif
строка 82, команда     catch /^Vim\%((\a\+)\)\=:E363/
строка 83, команда       " We won't find anything, so skip searching, should keep Vim responsive.
строка 84, команда       return
строка 85, команда     endtry
строка 86, команда   endif
строка 87, команда 
строка 88, команда   " Limit the search to lines visible in the window.
строка 89, команда   let stoplinebottom = line('w$')
строка 90, команда   let stoplinetop = line('w0')
строка 91, команда   if i % 2 == 0
строка 92, команда     let stopline = stoplinebottom
строка 93, команда   else
строка 94, команда     let stopline = stoplinetop
строка 95, команда   endif
строка 96, команда 
строка 97, команда   " Limit the search time to 300 msec to avoid a hang on very long lines.
строка 98, команда   " This fails when a timeout is not supported.
строка 99, команда   if mode() == 'i' || mode() == 'R'
строка 100, команда     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
строка 101, команда   else
строка 102, команда     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
строка 103, команда   endif
строка 104, команда   try
строка 105, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
строка 106, команда   catch /E118/
строка 107, команда     " Can't use the timeout, restrict the stopline a bit more to avoid taking
строка 108, команда     " a long time on closed folds and long lines.
строка 109, команда     " The "viewable" variables give a range in which we can scroll while
строка 110, команда     " keeping the cursor at the same position.
строка 111, команда     " adjustedScrolloff accounts for very large numbers of scrolloff.
строка 112, команда     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
строка 113, команда     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
строка 114, команда     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
строка 115, команда     " one of these stoplines will be adjusted below, but the current values are
строка 116, команда     " minimal boundaries within the current window
строка 117, команда     if i % 2 == 0
строка 118, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 119, команда ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
строка 120, команда ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
строка 121, команда       else
строка 122, команда ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
строка 123, команда       endif
строка 124, команда       let stoplinebottom = stopline
строка 125, команда     else
строка 126, команда       if has("byte_offset") && has("syntax_items") && &smc > 0
строка 127, команда ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
строка 128, команда ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
строка 129, команда       else
строка 130, команда ^Ilet stopline = max([top_viewable, c_lnum - 100])
строка 131, команда       endif
строка 132, команда       let stoplinetop = stopline
строка 133, команда     endif
строка 134, команда     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
строка 135, команда   endtry
строка 136, команда 
строка 137, команда   if before > 0
строка 138, команда     if has_getcurpos
строка 139, команда       call setpos('.', save_cursor)
строка 140, команда     else
строка 141, команда       call winrestview(save_cursor)
строка 142, команда     endif
строка 143, команда   endif
строка 144, команда 
строка 145, команда   " If a match is found setup match highlighting.
строка 146, команда   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
строка 147, команда     if exists('*matchaddpos')
строка 148, команда       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
строка 149, команда     else
строка 150, команда       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
строка 152, команда     endif
строка 153, команда     let w:paren_hl_on = 1
строка 154, команда   endif
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВСТАВКИ --
Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9751B записано
"HiAttr2CssDecl.vim" 300L, 9751B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let g:bg_norm = '#282828'
строка 11, команда let g:fg_norm = '#ebdbb2'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if g:bg_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:bg_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:bg_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if g:fg_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:fg_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:fg_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let g:bg_norm = s:is_norm ? l:bgc : g:bg_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if g:bg_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:bg_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:bg_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if g:fg_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:fg_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:fg_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let g:fg_norm = s:is_norm ? l:fgc : g:fg_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if g:bg_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:bg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:bg_norm .. ';' .. ' text-decoration-color: ' .. g:bg_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if g:fg_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:fg_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:fg_norm .. ';' .. ' text-decoration-color: ' .. g:fg_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' g:fg_norm
                                                                    fg_norm in rvrs  #ebdbb2
строка 220, команда "^Iecho 'bg_norm in rvrs ' g:bg_norm
строка 221, команда ^Iif g:fg_norm && g:bg_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. g:bg_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. g:fg_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. g:bg_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. g:fg_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:b_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

Выполнено 16 замен в 15 строках
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнено 16 замен в 15 строках

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

заменить словом g:f_norm ? (y; n; a; q; l; CTRL+E; CTRL+Y)

Выполнено 16 замен в 15 строках
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнено 16 замен в 15 строках

"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9715B записано
"HiAttr2CssDecl.vim" 300L, 9715B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let g:b_norm = '#282828'
строка 11, команда let g:f_norm = '#ebdbb2'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if g:b_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:b_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:b_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if g:f_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:f_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:f_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let g:b_norm = s:is_norm ? l:bgc : g:b_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if g:b_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:b_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:b_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if g:f_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:f_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:f_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let g:f_norm = s:is_norm ? l:fgc : g:f_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if g:b_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:b_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:b_norm .. ';' .. ' text-decoration-color: ' .. g:b_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if g:f_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:f_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:f_norm .. ';' .. ' text-decoration-color: ' .. g:f_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' g:f_norm
                                                                   fg_norm in rvrs  #ebdbb2
строка 220, команда "^Iecho 'bg_norm in rvrs ' g:b_norm
строка 221, команда ^Iif g:f_norm && g:b_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. g:b_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. g:f_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. g:b_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. g:f_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
HiAttr2CssDecl вернула #-1

-1
вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


#ebdbb2
Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВСТАВКИ --
Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"

Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

вызов RC_BalloonLngShow()

строка 1, команда "^Ireturn &iminsert ? "Language in active buffer " .. b:keymap_name
строка 2, команда "^I\: "Language in active buffer <ENG>"
строка 3, команда ^Ireturn &iminsert ? "Язык ввода в активном буфере <RUS>": "Locale in active buffer <ENG>"
RC_BalloonLngShow вернула 'Locale in active buffer <ENG>'

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"
-- РЕЖИМ ВСТАВКИ --
Выполнение для события CursorMovedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMovedI автокоманды "*"

Выполнение для события TextChangedI автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChangedI автокоманды "*"


Выполнение для события CursorMoved автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события CursorMoved автокоманды "*"

Выполнение для события TextChanged автокоманды "*"
автокоманда call s:Highlight_Matching_Pair()

Выполнение call s:Highlight_Matching_Pair()
вызов <SNR>18_Highlight_Matching_Pair()

строка 1, команда   " Remove any previous match.
строка 2, команда   call s:Remove_Matches()
вызов <SNR>18_Remove_Matches()

строка 1, команда   if exists('w:paren_hl_on') && w:paren_hl_on
строка 2, команда     silent! call matchdelete(3)
строка 3, команда     let w:paren_hl_on = 0
строка 4, команда   endif
<SNR>18_Remove_Matches вернула #0

Начинается обработка <SNR>18_Highlight_Matching_Pair

строка 3, команда 
строка 4, команда   " Avoid that we remove the popup menu.
строка 5, команда   " Return when there are no colors (looks like the cursor jumps).
строка 6, команда   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
строка 7, команда     return
строка 8, команда   endif
строка 9, команда 
строка 10, команда   " Get the character under the cursor and check if it's in 'matchpairs'.
строка 11, команда   let c_lnum = line('.')
строка 12, команда   let c_col = col('.')
строка 13, команда   let before = 0
строка 14, команда 
строка 15, команда   let text = getline(c_lnum)
строка 16, команда   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
строка 17, команда   if empty(matches)
строка 18, команда     let [c_before, c] = ['', '']
строка 19, команда   else
строка 20, команда     let [c_before, c] = matches[1:2]
строка 21, команда   endif
строка 22, команда   let plist = split(&matchpairs, '.\zs[:,]')
строка 23, команда   let i = index(plist, c)
строка 24, команда   if i < 0
строка 25, команда     " not found, in Insert mode try character before the cursor
строка 26, команда     if c_col > 1 && (mode() == 'i' || mode() == 'R')
строка 27, команда       let before = strlen(c_before)
строка 28, команда       let c = c_before
строка 29, команда       let i = index(plist, c)
строка 30, команда     endif
строка 31, команда     if i < 0
строка 32, команда       " not found, nothing to do
строка 33, команда       return
<SNR>18_Highlight_Matching_Pair вернула #0

Начинается обработка для события TextChanged автокоманды "*"


"HiAttr2CssDecl.vim" 
"HiAttr2CssDecl.vim" 300L, 9716B записано
"HiAttr2CssDecl.vim" 300L, 9716B записано

Обработка командного файла "HiAttr2CssDecl.vim"
строка 1, команда 
строка 2, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'undcrl': 1, 'decolo': '#83a598', 'color': '#ebdbb2'}
строка 3, команда "
строка 4, команда "{'bg': '#282828', 'font': {'fnthght': '9', 'fntname': 'JetBrains Mono'}, 'color': '#ebdbb2'} 
строка 5, команда "
строка 6, команда "{'bg': '#282828', 'undlne': 1, 'wght': 1, 'itlc': 1, 'font': {'fntbold': 1, 'fnthght': '9', 'fntname': 'JetBrains Mono', 'fntwght': '350', 'fntitlc': 1, 'fntwdth': '8.5', 'fntsout': 1, 'fntundr': 1}, 'color': '#ebdbb2', 'decolo': '#83a598'}
строка 7, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 8, команда let s:is_norm = 0
строка 9, команда let s:css_decl = []
строка 10, команда let g:b_norm = '#282828'
строка 11, команда let g:f_norm = '#ebdbb2'
строка 12, команда 
строка 13, команда "{'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'}
строка 14, команда 
строка 15, команда function HiAttr2CssDecl(hiattr)
Завершена обработка командного файла HiAttr2CssDecl.vim

вызов HiAttr2CssDecl({'bg': '#282828', 'wght': 1, 'rvrs': 1, 'color': '#fb4934'})

строка 1, команда     let l:fnt = ''
строка 2, команда     if !has_key(a:hiattr, 'font') && s:is_norm
строка 3, команда ^Ilet l:fnt = s:ParseFont(getfontname())
строка 4, команда ^Iif type(0) == type(l:fnt) && -1 == l:fnt
строка 5, команда ^I    return -1
строка 6, команда ^Iendif
строка 7, команда     elseif has_key(a:hiattr, 'font')
строка 8, команда ^Ilet l:fnt = a:hiattr['font']
строка 9, команда     endif
строка 10, команда 
строка 11, команда     if !empty(l:fnt)
строка 12, команда " Формируем правила для шрифта
строка 13, команда ^Iif has_key(l:fnt, 'fntname')
строка 14, команда ^I    let s:css_decl = add(s:css_decl, 'font-family: "' .. l:fnt['fntname'] .. '", monospace;')
строка 15, команда ^Iendif
строка 16, команда ^Iif has_key(l:fnt, 'fnthght')
строка 17, команда ^I    let s:css_decl = add(s:css_decl, 'font-size: ' .. (has('X11') ? l:fnt['fnthght']/10 : l:fnt['fnthght']) .. 'pt;')
строка 18, команда ^Iendif
строка 19, команда ^Iif has_key(l:fnt, 'fntwdt')
строка 20, команда ^I    if has('X11')
строка 21, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-stretch: ' .. (tr(l:fnt['fntwdt'], ' ', '-')) .. ';')
строка 22, команда ^I    endif
строка 23, команда ^Iendif
строка 24, команда ^Iif has_key(l:fnt, 'fntwght')
строка 25, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: ' .. l:fnt['fntwght'] .. ';')
строка 26, команда ^Iendif
строка 27, команда ^Iif get(l:fnt, 'fntbold')
строка 28, команда ^I    let l:idx = match(s:css_decl, 'font-weight')
строка 29, команда ^I    if 0 <= l:idx
строка 30, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 31, команда ^I    else
строка 32, команда ^I^Ilet s:css_decl = add(s:css_decl, 'font-weight: bold;') 
строка 33, команда ^I    endif
строка 34, команда ^Iendif
строка 35, команда ^Iif get(l:fnt, 'fntitlc')
строка 36, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 37, команда ^Iendif
строка 38, команда     endif
строка 39, команда 
строка 40, команда     if get(a:hiattr, 'wght')
строка 41, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 42, команда ^Iif 0 <= l:idx
строка 43, команда ^I    if 0 > match(s:css_decl[l:idx], 'bold')
строка 44, команда ^I^Ilet s:css_decl[l:idx] = 'font-weight: bold;'
строка 45, команда ^I    endif
строка 46, команда ^Ielse
строка 47, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: bold;')
строка 48, команда ^Iendif
строка 49, команда     endif
строка 50, команда 
строка 51, команда     if get(a:hiattr, 'itlc')
строка 52, команда ^Ilet l:idx = match(s:css_decl, 'font-style:')
строка 53, команда ^Iif 0 <= l:idx
строка 54, команда ^I    if 0 > match(s:css_decl[l:idx], 'italic')
строка 55, команда ^I^Ilet s:css_decl[l:idx] = 'font-style: italic;'
строка 56, команда ^I    endif
строка 57, команда ^Ielse
строка 58, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: italic;')
строка 59, команда ^Iendif
строка 60, команда     endif
строка 61, команда 
строка 62, команда " Формируем правила для цвета заднего и переднего плана
строка 63, команда     if has_key(a:hiattr, 'bg')
строка 64, команда ^Ilet l:bgc = get(a:hiattr, 'bg')
строка 65, команда ^Iif 'NONE' ==? l:bgc && !s:is_norm
строка 66, команда ^I    let l:idx = match(s:css_decl, 'backround-color')
строка 67, команда ^I    if 0 <= l:idx
строка 68, команда ^I^Ilet s:css_decl[l:idc] = 'background-color: transparent;'
строка 69, команда ^I    else
строка 70, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: transparent;')
строка 71, команда ^I    endif
строка 72, команда ^Ielseif 'bg' ==? l:bgc && !s:is_norm
строка 73, команда ^I    if g:b_norm
строка 74, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 75, команда ^I^Iif 0 <=l:idx
строка 76, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:b_norm
строка 77, команда ^I^Ielse
строка 78, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:b_norm)
строка 79, команда ^I^Iendif
строка 80, команда ^I    else
строка 81, команда ^I^Ireturn -1
строка 82, команда ^I    endif
строка 83, команда ^Ielseif 'fg' ==? l:bgc && !s:is_norm
строка 84, команда ^I    if g:f_norm
строка 85, команда ^I^Ilet l:idx = match(s:css_decl, 'background-color')
строка 86, команда ^I^Iif 0 <=l:idx
строка 87, команда ^I^I    let s:css_decl[l:idx] = 'background-color: ' .. g:f_norm
строка 88, команда ^I^Ielse
строка 89, команда ^I^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. g:f_norm)
строка 90, команда ^I^Iendif
строка 91, команда ^I    else
строка 92, команда ^I^Ireturn -1
строка 93, команда ^I    endif
строка 94, команда ^Ielse
строка 95, команда ^I    let s:css_decl = add(s:css_decl, 'background-color: ' .. l:bgc .. ';')
строка 96, команда ^I    let g:b_norm = s:is_norm ? l:bgc : g:b_norm
строка 97, команда ^Iendif
строка 98, команда     endif
строка 99, команда 
строка 100, команда     if has_key(a:hiattr, 'color')
строка 101, команда ^Ilet l:fgc = get(a:hiattr, 'color')
строка 102, команда ^Iif 'NONE' ==? l:fgc && !s:is_norm
строка 103, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 104, команда ^I    if 0 <= l:idx
строка 105, команда ^I^Ilet s:css_decl[l:idx] = 'color: inherit;'
строка 106, команда ^I    else
строка 107, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: inherit;')
строка 108, команда ^I    endif
строка 109, команда ^Ielseif 'bg' ==? l:fgc && !s:is_norm
строка 110, команда ^I    if g:b_norm
строка 111, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 112, команда ^I^Iif 0 <= l:idx
строка 113, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:b_norm .. ';'
строка 114, команда ^I^Ielse
строка 115, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:b_norm .. ';')
строка 116, команда ^I^Iendif
строка 117, команда ^I    else
строка 118, команда ^I^Ireturn -1
строка 119, команда ^I    endif
строка 120, команда ^Ielseif 'fg' ==? l:fgc && !s:is_norm
строка 121, команда ^I    if g:f_norm
строка 122, команда ^I^Ilet l:idx = match(s:css_decl, '\<color')
строка 123, команда ^I^Iif 0 <= l:idx
строка 124, команда ^I^I    let s:css_decl[l:idx] = 'color: ' .. g:f_norm .. ';'
строка 125, команда ^I^Ielse
строка 126, команда ^I^I    let s:css_decl = add(s:css_decl, 'color: ' .. g:f_norm .. ';')
строка 127, команда ^I^Iendif
строка 128, команда ^I    else
строка 129, команда ^I^Ireturn -1
строка 130, команда ^I    endif
строка 131, команда ^Ielse
строка 132, команда ^I    let s:css_decl = add(s:css_decl, 'color: ' .. l:fgc .. ';')
строка 133, команда ^I    let g:f_norm = s:is_norm ? l:fgc : g:f_norm
строка 134, команда ^Iendif
строка 135, команда     endif
строка 136, команда 
строка 137, команда     if !empty(l:fnt)
строка 138, команда ^Iif get(l:fnt, 'fntundr')
строка 139, команда ^I   let l:idx = match(s:css_decl, 'text-decoration')
строка 140, команда ^I   if 0 <= l:idx
строка 141, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 142, команда ^I   else
строка 143, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 144, команда ^I    endif
строка 145, команда ^Iendif
строка 146, команда ^Iif get(l:fnt, 'fntsout')
строка 147, команда ^I    let l:idx = match(s:css_decl, 'text-decoration')
строка 148, команда ^I    if 0 <= l:idx
строка 149, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 150, команда ^I    else
строка 151, команда ^I^Ilet s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 152, команда ^I    endif
строка 153, команда ^Iendif
строка 154, команда     endif
строка 155, команда 
строка 156, команда     if get(a:hiattr, 'undlne') && !s:is_norm
строка 157, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 158, команда ^Iif 0 <= l:idx
строка 159, команда ^I    if 0 > match(s:css_decl[l:idx], 'underline')
строка 160, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' underline;'
строка 161, команда ^I    endif
строка 162, команда ^Ielse
строка 163, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: underline;')
строка 164, команда ^Iendif
строка 165, команда     endif
строка 166, команда 
строка 167, команда     if get(a:hiattr, 'skthro') && !s:is_norm
строка 168, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 169, команда ^Iif 0 <= l:idx
строка 170, команда ^I    if 0 > match(s:css_decl[l:idx], 'line-throught')
строка 171, команда ^I^Ilet s:css_decl[l:idx] = trim(s:css_decl[l:idx], ';', 2) .. ' line-throught;'
строка 172, команда ^I    endif
строка 173, команда ^Ielse
строка 174, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: line-throught;')
строка 175, команда ^Iendif
строка 176, команда     endif
строка 177, команда 
строка 178, команда     if get(a:hiattr, 'undcrl') && !s:is_norm
строка 179, команда ^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-line: underline; -moz-text-decoration-style: wavy;' .. ' -webkit-text-decoration-line: underline; -webkit-text-decoration-style: wavy;' .. ' text-decoration-line: underline; text-decoration-style: wavy;')
строка 183, команда     endif
строка 184, команда 
строка 185, команда     if has_key(a:hiattr, 'decolo') && !s:is_norm
строка 186, команда ^Ilet l:tdc = get(a:hiattr, 'decolo')
строка 187, команда ^Iif 'NONE' ==? l:tdc
строка 188, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: currentColor;' .. ' -webkit-text-decoration-color: currentColor;' .. ' text-decoration-color: currentColor;')
строка 192, команда ^Ielseif 'bg' ==? l:tdc
строка 193, команда ^I    if g:b_norm
строка 194, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:b_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:b_norm .. ';' .. ' text-decoration-color: ' .. g:b_norm .. ';')
строка 198, команда ^I    else
строка 199, команда ^I^Ireturn -1
строка 200, команда ^I    endif
строка 201, команда ^Ielseif 'fg' ==? l:tdc
строка 202, команда ^I    if g:f_norm
строка 203, команда ^I^Ilet s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. g:f_norm .. ';' .. ' -webkit-text-decoration-color: ' .. g:f_norm .. ';' .. ' text-decoration-color: ' .. g:f_norm .. ';')
строка 207, команда ^I    else
строка 208, команда ^I^Ireturn -1
строка 209, команда ^I    endif
строка 210, команда ^Ielse
строка 211, команда ^I    let s:css_decl = add(s:css_decl, '-moz-text-decoration-color: ' .. l:tdc .. ';' .. ' -webkit-text-decoration-color: ' .. l:tdc .. ';' .. ' text-decoration-color: ' .. l:tdc .. ';')
строка 215, команда ^Iendif
строка 216, команда     endif
строка 217, команда 
строка 218, команда     if get(a:hiattr, 'rvrs') && !s:is_norm
строка 219, команда ^Iecho 'fg_norm in rvrs ' g:f_norm
                                                                   fg_norm in rvrs  #ebdbb2
строка 220, команда ^Iecho 'bg_norm in rvrs ' g:b_norm
bg_norm in rvrs  #282828
строка 221, команда "^Iif g:f_norm && g:b_norm
строка 222, команда ^I    let @i = ''
строка 223, команда ^I    let @f = ''
строка 224, команда ^I    let @x = ''
строка 225, команда ^I    let @b = ''
строка 226, команда ^I    let l:idx = match(s:css_decl, '\<color')
строка 227, команда ^I    if 0 <= l:idx
строка 228, команда ^I^Ilet @i = l:idx
строка 229, команда ^I^Ilet @f = s:css_decl[l:idx]
строка 230, команда ^I    endif
строка 231, команда ^I    let l:idx = match(s:css_decl, 'background-color')
строка 232, команда ^I    if 0 <= l:idx
строка 233, команда ^I^Ilet @x = l:idx
строка 234, команда ^I^Ilet @b = s:css_decl[l:idx]
строка 235, команда ^I    endif
строка 236, команда ^I    if @f && @b
строка 237, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. @b .. ';'
строка 238, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. @f .. ';'
строка 239, команда ^I    elseif @f && !@b
строка 240, команда ^I^Ilet s:css_decl[@i] = 'color: ' .. g:b_norm .. ';'
строка 241, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. @f .. ';')
строка 242, команда ^I    elseif !@f && @b
строка 243, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. @b .. ';')
строка 244, команда ^I^Ilet s:css_decl[@x] = 'background-color: ' .. g:f_norm .. ';'
строка 245, команда ^I    elseif !@f && !@b
строка 246, команда ^I^Ilet s:css_decl = add(s:css_decl, 'color: ' .. g:b_norm .. ';')
строка 247, команда ^I^Ilet s:css_decl = add(s:css_decl, 'background-color: ' .. g:f_norm .. ';')
строка 248, команда ^I    endif
строка 249, команда ^Ielse
строка 250, команда ^I    return -1
строка 251, команда "^Iendif
строка 252, команда     endif
строка 253, команда 
строка 254, команда     if get(a:hiattr, 'rset') && !s:is_norm
строка 255, команда ^Ilet l:idx = match(s:css_decl, 'font-weight')
строка 256, команда ^Iif 0 <= l:idx
строка 257, команда ^I    let s:css_decl[l:idx] = 'font-weight: normal;'
строка 258, команда ^Ielse
строка 259, команда ^I    let s:css_decl = add(s:css_decl, 'font-weight: normal;')
строка 260, команда ^Iendif
строка 261, команда ^Ilet l:idx = match(s:css_decl, 'font-style')
строка 262, команда ^Iif 0 <= l:idx
строка 263, команда ^I    let s:css_decl[l:idx] = 'font-style: normal;'
строка 264, команда ^Ielse
строка 265, команда ^I    let s:css_decl = add(s:css_decl, 'font-style: normal;')
строка 266, команда ^Iendif
строка 267, команда ^Ilet l:idx = match(s:css_decl, 'text-decoration')
строка 268, команда ^Iif 0 <= l:idx
строка 269, команда ^I    let s:css_decl[l:idx] = 'text-decoration: none;'
строка 270, команда ^Ielse
строка 271, команда ^I    let s:css_decl = add(s:css_decl, 'text-decoration: none;')
строка 272, команда ^Iendif
строка 273, команда     endif
строка 274, команда 
строка 275, команда     if get(a:hiattr, 'lum')
строка 276, команда " что‐то делаем
строка 277, команда     endif
строка 278, команда 
строка 279, команда     if get(a:hiattr, 'ncomb')
строка 280, команда " что‐то делаем
строка 281, команда     endif
строка 282, команда echo 'fg_norm ' g:f_norm
fg_norm  #ebdbb2
строка 283, команда echo 'bg_norm ' g:b_norm
bg_norm  #282828
строка 284, команда     return s:css_decl
HiAttr2CssDecl вернула ['font-weight: bold;', 'background-col...282828;', 'background-color: #ebdbb2;']

['font-weight: bold;', 'background-color: #282828;', 'color: #fb4934;', 'color: #282828;', 'background-color: #ebdbb2;']
Запись viminfo-файла "D:\Users\Iam\_viminfo"
Выполнение для события VimLeave автокоманды "*"
автокоманда call s:persistCache()

Выполнение call s:persistCache()
вызов <SNR>21_persistCache()

строка 1, команда ^Ilet l:cacheList = []
строка 2, команда ^Ilet l:mergedCache = extend(s:readCache(), s:cache)
вызов <SNR>21_readCache()

строка 1, команда ^Iif !filereadable(g:semanticPersistCacheLocation)
строка 2, команда ^I^Ireturn []
строка 3, команда ^Iendif
строка 4, команда 
строка 5, команда ^Ilet l:localCache = {}
строка 6, команда ^Ilet s:cacheList = readfile(g:semanticPersistCacheLocation)
строка 7, команда ^Ifor s:cacheListItem in s:cacheList
строка 8, команда ^I^Ilet s:cacheListItemList = eval(s:cacheListItem)
строка 9, команда ^I^Ilet l:localCache[s:cacheListItemList[0]] = s:cacheListItemList[1]
строка 10, команда ^Iendfor
строка 11, команда 
строка 12, команда ^Iif exists("s:cacheListItem")
строка 13, команда ^I^Iunlet s:cacheListItem s:cacheList
строка 14, команда ^Iendif
строка 15, команда 
строка 16, команда ^Ireturn l:localCache
<SNR>21_readCache вернула {}

Начинается обработка <SNR>21_persistCache

строка 3, команда ^Ifor [match,color] in items(l:mergedCache)
строка 4, команда ^I^Icall add(l:cacheList, string([match, color]))
строка 5, команда ^I^Iunlet match color
строка 6, команда ^Iendfor
строка 7, команда ^Icall writefile(l:cacheList, g:semanticPersistCacheLocation)
<SNR>21_persistCache вернула #0

Начинается обработка для события VimLeave автокоманды "*"
